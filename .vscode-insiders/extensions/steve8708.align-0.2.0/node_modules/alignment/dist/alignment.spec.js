"use strict";
var test = require('blue-tape');
var alignment_1 = require('./alignment');
test('alignment', function (t) {
    t.test('block', function (t) {
        t.test('align block of code', function (t) {
            var result = alignment_1.block([
                'left=right',
                'another = more'
            ].join('\n'));
            t.equal(result[0], [
                'left    = right',
                'another = more'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 8], [1, 8]]);
            t.end();
        });
        t.test('php style variables', function (t) {
            var result = alignment_1.block([
                '$a = 1;',
                '$bg = 2;'
            ].join('\n'));
            t.equal(result[0], [
                '$a  = 1;',
                '$bg = 2;'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 4], [1, 4]]);
            t.end();
        });
        t.test('align text using colons', function (t) {
            var result = alignment_1.block([
                'left  : right',
                'another   :test',
                'something: else',
            ].join('\n'));
            t.equal(result[0], [
                'left:      right',
                'another:   test',
                'something: else'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 4], [1, 7], [2, 9]]);
            t.end();
        });
        t.test('align text with colons and equals', function (t) {
            var result = alignment_1.block([
                'left  = right',
                'another   :test',
                'something: else'
            ].join('\n'));
            t.equal(result[0], [
                'left     = right',
                'another:   test',
                'something: else'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 9], [1, 7], [2, 9]]);
            t.end();
        });
        t.test('ignore text in quotes', function (t) {
            var result = alignment_1.block([
                '"left:test"  = right',
                '"another ="  :test',
                'something: else'
            ].join('\n'));
            t.equal(result[0], [
                '"left:test" = right',
                '"another =":  test',
                'something:    else'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 12], [1, 11], [2, 9]]);
            t.end();
        });
        t.test('align multiple signs', function (t) {
            var result = alignment_1.block([
                'this = that = test',
                'another = thing = here'
            ].join('\n'));
            t.equal(result[0], [
                'this    = that  = test',
                'another = thing = here'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 8], [0, 16], [1, 8], [1, 16]]);
            t.end();
        });
        t.test('ignore escaped quotes', function (t) {
            var result = alignment_1.block([
                '"test\\" escape": more',
                '\'yet another \\\' escape\' = more'
            ].join('\n'));
            t.equal(result[0], [
                '"test\\" escape":          more',
                '\'yet another \\\' escape\' = more'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 15], [1, 24]]);
            t.end();
        });
        t.test('align multiple separators', function (t) {
            var result = alignment_1.block([
                'test += 1',
                'something -= 1',
                'else /= 1'
            ].join('\n'));
            t.equal(result[0], [
                'test      += 1',
                'something -= 1',
                'else      /= 1'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 10], [1, 10], [2, 10]]);
            t.end();
        });
        t.test('ignore lines with no separator', function (t) {
            var result = alignment_1.block([
                'something += 1',
                '# comment',
                'again = 5'
            ].join('\n'));
            t.equal(result[0], [
                'something += 1',
                '# comment',
                'again      = 5'
            ].join('\n'));
            t.deepEqual(result[1], [[0, 10], [2, 11]]);
            t.end();
        });
    });
    t.test('ignore escaped opening quotes', function (t) {
        var result = alignment_1.block([
            'test\\"something=":else"',
            'something = simple'
        ].join('\n'));
        t.equal(result[0], [
            'test\\"something = ":else"',
            'something       = simple'
        ].join('\n'));
        t.deepEqual(result[1], [[0, 16], [1, 16]]);
        t.end();
    });
    t.test('catch escaped esscape characters', function (t) {
        var result = alignment_1.block([
            '"test\\\\" :escape":more',
            '\'yet another \\\' escape\' = more'
        ].join('\n'));
        t.equal(result[0], [
            '"test\\\\":                 escape":more',
            '\'yet another \\\' escape\' = more'
        ].join('\n'));
        t.deepEqual(result[1], [[0, 8], [1, 24]]);
        t.end();
    });
    t.test('ignore double colon', function (t) {
        var result = alignment_1.block([
            'App::NAME_KEY => \'text\',',
            'App::FORMAT_KEY => \'123\''
        ].join('\n'));
        t.equal(result[0], [
            'App::NAME_KEY   => \'text\',',
            'App::FORMAT_KEY => \'123\''
        ].join('\n'));
        t.deepEqual(result[1], [[0, 16], [1, 16]]);
        t.end();
    });
});
//# sourceMappingURL=alignment.spec.js.map