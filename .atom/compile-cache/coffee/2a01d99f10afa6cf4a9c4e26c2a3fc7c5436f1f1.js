(function() {
  var Dom;

  Dom = require(atom.packages.getLoadedPackage('seti-ui').path + '/lib/dom');

  module.exports = {
    addWhenFalse: function(obj) {
      if (!Array.isArray(obj.el)) {
        obj.el = [obj.el];
      }
      return obj.el.forEach(function(element) {
        var el;
        el = Dom.queryAll(element);
        if (!obj.bool) {
          return Dom.addClass(el, obj.className);
        } else {
          return Dom.removeClass(el, obj.className);
        }
      });
    },
    addWhenTrue: function(obj) {
      if (!Array.isArray(obj.el)) {
        obj.el = [obj.el];
      }
      return obj.el.forEach(function(element) {
        var el;
        el = Dom.queryAll(element);
        if (obj.bool) {
          return Dom.addClass(el, obj.className);
        } else {
          return Dom.removeClass(el, obj.className);
        }
      });
    },
    applySetting: function(obj) {
      atom.config.set(obj.config, obj.val);
      return this[obj.action]({
        el: obj.el,
        className: obj.className,
        bool: obj.val
      }, atom.config.onDidChange(obj.config, function(value) {
        if (value.oldValue !== value.newValue && typeof obj.cb === 'function') {
          return obj.cb(value.newValue);
        }
      }));
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL21pbmdiby8uYXRvbS9wYWNrYWdlcy9zZXRpLXVpL2xpYi91dGlsaXR5LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsR0FBQSxHQUFNLE9BQUEsQ0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFkLENBQStCLFNBQS9CLENBQXlDLENBQUMsSUFBMUMsR0FBaUQsVUFBekQ7O0VBRU4sTUFBTSxDQUFDLE9BQVAsR0FHRTtJQUFBLFlBQUEsRUFBYyxTQUFDLEdBQUQ7TUFJWixJQUFHLENBQUMsS0FBSyxDQUFDLE9BQU4sQ0FBYyxHQUFHLENBQUMsRUFBbEIsQ0FBSjtRQUNFLEdBQUcsQ0FBQyxFQUFKLEdBQVMsQ0FBRSxHQUFHLENBQUMsRUFBTixFQURYOzthQUdBLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBUCxDQUFlLFNBQUMsT0FBRDtBQUViLFlBQUE7UUFBQSxFQUFBLEdBQUssR0FBRyxDQUFDLFFBQUosQ0FBYSxPQUFiO1FBRUwsSUFBRyxDQUFDLEdBQUcsQ0FBQyxJQUFSO2lCQUNFLEdBQUcsQ0FBQyxRQUFKLENBQWEsRUFBYixFQUFpQixHQUFHLENBQUMsU0FBckIsRUFERjtTQUFBLE1BQUE7aUJBR0UsR0FBRyxDQUFDLFdBQUosQ0FBZ0IsRUFBaEIsRUFBb0IsR0FBRyxDQUFDLFNBQXhCLEVBSEY7O01BSmEsQ0FBZjtJQVBZLENBQWQ7SUFrQkEsV0FBQSxFQUFhLFNBQUMsR0FBRDtNQUlYLElBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTixDQUFjLEdBQUcsQ0FBQyxFQUFsQixDQUFKO1FBQ0UsR0FBRyxDQUFDLEVBQUosR0FBUyxDQUFFLEdBQUcsQ0FBQyxFQUFOLEVBRFg7O2FBR0EsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFQLENBQWUsU0FBQyxPQUFEO0FBRWIsWUFBQTtRQUFBLEVBQUEsR0FBSyxHQUFHLENBQUMsUUFBSixDQUFhLE9BQWI7UUFFTCxJQUFHLEdBQUcsQ0FBQyxJQUFQO2lCQUNFLEdBQUcsQ0FBQyxRQUFKLENBQWEsRUFBYixFQUFpQixHQUFHLENBQUMsU0FBckIsRUFERjtTQUFBLE1BQUE7aUJBR0UsR0FBRyxDQUFDLFdBQUosQ0FBZ0IsRUFBaEIsRUFBb0IsR0FBRyxDQUFDLFNBQXhCLEVBSEY7O01BSmEsQ0FBZjtJQVBXLENBbEJiO0lBbUNBLFlBQUEsRUFBYyxTQUFDLEdBQUQ7TUFJWixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsR0FBRyxDQUFDLE1BQXBCLEVBQTRCLEdBQUcsQ0FBQyxHQUFoQzthQUVBLElBQUUsQ0FBQSxHQUFHLENBQUMsTUFBSixDQUFGLENBQ0U7UUFBQSxFQUFBLEVBQUksR0FBRyxDQUFDLEVBQVI7UUFDQSxTQUFBLEVBQVcsR0FBRyxDQUFDLFNBRGY7UUFFQSxJQUFBLEVBQU0sR0FBRyxDQUFDLEdBRlY7T0FERixFQUtFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBWixDQUF3QixHQUFHLENBQUMsTUFBNUIsRUFBb0MsU0FBQyxLQUFEO1FBQ2xDLElBQUcsS0FBSyxDQUFDLFFBQU4sS0FBa0IsS0FBSyxDQUFDLFFBQXhCLElBQXFDLE9BQU8sR0FBRyxDQUFDLEVBQVgsS0FBaUIsVUFBekQ7aUJBQ0UsR0FBRyxDQUFDLEVBQUosQ0FBTyxLQUFLLENBQUMsUUFBYixFQURGOztNQURrQyxDQUFwQyxDQUxGO0lBTlksQ0FuQ2Q7O0FBTEYiLCJzb3VyY2VzQ29udGVudCI6WyJEb20gPSByZXF1aXJlKGF0b20ucGFja2FnZXMuZ2V0TG9hZGVkUGFja2FnZSgnc2V0aS11aScpLnBhdGggKyAnL2xpYi9kb20nKVxuXG5tb2R1bGUuZXhwb3J0cyA9XG5cbiAgIyBBREQgQ0xBU1MgV0hFTiBDT05ESVRJT05BTCBJUyBGQUxTRVxuICBhZGRXaGVuRmFsc2U6IChvYmopIC0+XG5cblxuICAgICMgQ09OVkVSVCBUTyBBTiBBUlJBWSBJRiBOT1RcbiAgICBpZiAhQXJyYXkuaXNBcnJheShvYmouZWwpXG4gICAgICBvYmouZWwgPSBbIG9iai5lbCBdXG5cbiAgICBvYmouZWwuZm9yRWFjaCAoZWxlbWVudCkgLT5cblxuICAgICAgZWwgPSBEb20ucXVlcnlBbGwoZWxlbWVudCkgI0ZJTkQgRUxFTUVOVCBJTiBET01cblxuICAgICAgaWYgIW9iai5ib29sXG4gICAgICAgIERvbS5hZGRDbGFzcyBlbCwgb2JqLmNsYXNzTmFtZSAjIEFERCBDTEFTU1xuICAgICAgZWxzZVxuICAgICAgICBEb20ucmVtb3ZlQ2xhc3MgZWwsIG9iai5jbGFzc05hbWUgIyBSRU1PVkUgQ0xBU1NcblxuXG4gICMgQUREIENMQVNTIFdIRU4gQ09ORElUSU9OQUwgSVMgVFJVRVxuICBhZGRXaGVuVHJ1ZTogKG9iaikgLT5cblxuXG4gICAgIyBDT05WRVJUIFRPIEFOIEFSUkFZIElGIE5PVFxuICAgIGlmICFBcnJheS5pc0FycmF5KG9iai5lbClcbiAgICAgIG9iai5lbCA9IFsgb2JqLmVsIF1cblxuICAgIG9iai5lbC5mb3JFYWNoIChlbGVtZW50KSAtPlxuXG4gICAgICBlbCA9IERvbS5xdWVyeUFsbChlbGVtZW50KSAjRklORCBFTEVNRU5UIElOIERPTVxuXG4gICAgICBpZiBvYmouYm9vbFxuICAgICAgICBEb20uYWRkQ2xhc3MgZWwsIG9iai5jbGFzc05hbWUgIyBBREQgQ0xBU1NcbiAgICAgIGVsc2VcbiAgICAgICAgRG9tLnJlbW92ZUNsYXNzIGVsLCBvYmouY2xhc3NOYW1lICMgUkVNT1ZFIENMQVNTXG5cblxuICBhcHBseVNldHRpbmc6IChvYmopIC0+XG5cblxuICAgICMgQVBQTFkgQSBORVcgU0VUVElOR1xuICAgIGF0b20uY29uZmlnLnNldCBvYmouY29uZmlnLCBvYmoudmFsXG5cbiAgICBAW29iai5hY3Rpb25dXG4gICAgICBlbDogb2JqLmVsXG4gICAgICBjbGFzc05hbWU6IG9iai5jbGFzc05hbWVcbiAgICAgIGJvb2w6IG9iai52YWxcblxuICAgICAgYXRvbS5jb25maWcub25EaWRDaGFuZ2Ugb2JqLmNvbmZpZywgKHZhbHVlKSAtPlxuICAgICAgICBpZiB2YWx1ZS5vbGRWYWx1ZSAhPSB2YWx1ZS5uZXdWYWx1ZSBhbmQgdHlwZW9mIG9iai5jYiA9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgb2JqLmNiIHZhbHVlLm5ld1ZhbHVlXG4iXX0=
