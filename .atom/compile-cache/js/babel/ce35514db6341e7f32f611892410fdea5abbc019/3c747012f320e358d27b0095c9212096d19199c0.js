'use babel';

var _require = require('immutable');

var fromJS = _require.fromJS;

module.exports = function compose(state, action) {
  if (state === undefined) state = [];

  var index = undefined;
  switch (action.type) {
    case "COMPOSE_FILE_SELECTED":
      return fromJS([]).push({
        'filePath': action.filePath,
        'services': action.services.map(function (service) {
          return fromJS(service).set('up', "unknown").toJS();
        }),
        'version': action.version
      }).toJS();
    case "COMPOSE_FILE_ADDED":
      if (state.find(function (file) {
        return file.filePath == action.filePath;
      })) return state;else {
        return fromJS(state).push({
          'filePath': action.filePath,
          'services': action.services.map(function (service) {
            return fromJS(service).set('up', "unknown").toJS();
          }),
          'version': action.version
        }).toJS();
      }
    case "SERVICES_REFRESHED":
      index = state.findIndex(function (file) {
        return file.filePath == action.filePath;
      });
      if (index != -1) {
        return fromJS(state).setIn([index, 'services'], action.services.map(function (service) {
          return fromJS(service).set('up', "unknown").toJS();
        })).toJS();
      } else {
        return state;
      }
    case "SERVICE_STATE_CHANGED":
      return fromJS(state).map(function (conf) {
        return conf.update('services', function (services) {
          return services.map(function (service) {
            var new_service = fromJS(action).get('services').find(function (s) {
              var n = s.get('name');
              return n == service.get('name') || n == service.get('container_name');
            }, {}, fromJS({}));

            return service.set('up', new_service.get('up', 'unknown'));
          });
        });
      }).toJS();
    default:
      return state;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taW5nYm8vY29uZmlnLy5hdG9tL3BhY2thZ2VzL2RvY2tlci9saWIvcmVkdXgvcmVkdWNlcnMvY29tcG9zZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUE7O2VBRUksT0FBTyxDQUFDLFdBQVcsQ0FBQzs7SUFBOUIsTUFBTSxZQUFOLE1BQU07O0FBRVgsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQU8sTUFBTSxFQUFFO01BQXBCLEtBQUssZ0JBQUwsS0FBSyxHQUFHLEVBQUU7O0FBQzFDLE1BQUksS0FBSyxZQUFBLENBQUM7QUFDVixVQUFPLE1BQU0sQ0FBQyxJQUFJO0FBQ2hCLFNBQUssdUJBQXVCO0FBQzFCLGFBQU8sTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNyQixrQkFBVSxFQUFFLE1BQU0sQ0FBQyxRQUFRO0FBQzNCLGtCQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPO2lCQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRTtTQUFBLENBQUM7QUFDekYsaUJBQVMsRUFBRSxNQUFNLENBQUMsT0FBTztPQUMxQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFBQSxBQUNaLFNBQUssb0JBQW9CO0FBQ3ZCLFVBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUk7ZUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRO09BQUEsQ0FBQyxFQUN0RCxPQUFPLEtBQUssQ0FBQyxLQUNWO0FBQ0gsZUFBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3hCLG9CQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVE7QUFDM0Isb0JBQVUsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFDLE9BQU87bUJBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFO1dBQUEsQ0FBQztBQUN6RixtQkFBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1NBQzFCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNYO0FBQUEsQUFDSCxTQUFLLG9CQUFvQjtBQUN2QixXQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFBLElBQUk7ZUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRO09BQUEsQ0FBQyxDQUFDO0FBQ2xFLFVBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUFFO0FBQ2YsZUFBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ1gsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsT0FBTztpQkFBSyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUU7U0FBQSxDQUFDLENBQUMsQ0FDekcsSUFBSSxFQUFFLENBQUM7T0FDakIsTUFBTTtBQUNMLGVBQU8sS0FBSyxDQUFDO09BQ2Q7QUFBQSxBQUNILFNBQUssdUJBQXVCO0FBQzFCLGFBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUk7ZUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxVQUFBLFFBQVEsRUFBSTtBQUNuRSxpQkFBTyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsT0FBTyxFQUFJO0FBQzdCLGdCQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsRUFBSTtBQUN6RCxrQkFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QixxQkFBTyxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ3ZFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUVuQixtQkFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1dBQzVELENBQUMsQ0FBQztTQUNKLENBQUM7T0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFBQSxBQUNiO0FBQ0UsYUFBTyxLQUFLLENBQUM7QUFBQSxHQUNoQjtDQUNGLENBQUMiLCJmaWxlIjoiL1VzZXJzL21pbmdiby9jb25maWcvLmF0b20vcGFja2FnZXMvZG9ja2VyL2xpYi9yZWR1eC9yZWR1Y2Vycy9jb21wb3NlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxudmFyIHtmcm9tSlN9ID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tcG9zZShzdGF0ZSA9IFtdLCBhY3Rpb24pIHtcbiAgbGV0IGluZGV4O1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiQ09NUE9TRV9GSUxFX1NFTEVDVEVEXCI6XG4gICAgICByZXR1cm4gZnJvbUpTKFtdKS5wdXNoKHtcbiAgICAgICAgJ2ZpbGVQYXRoJzogYWN0aW9uLmZpbGVQYXRoLFxuICAgICAgICAnc2VydmljZXMnOiBhY3Rpb24uc2VydmljZXMubWFwKChzZXJ2aWNlKSA9PiBmcm9tSlMoc2VydmljZSkuc2V0KCd1cCcsIFwidW5rbm93blwiKS50b0pTKCkpLFxuICAgICAgICAndmVyc2lvbic6IGFjdGlvbi52ZXJzaW9uLFxuICAgICAgfSkudG9KUygpO1xuICAgIGNhc2UgXCJDT01QT1NFX0ZJTEVfQURERURcIjpcbiAgICAgIGlmIChzdGF0ZS5maW5kKGZpbGUgPT4gZmlsZS5maWxlUGF0aCA9PSBhY3Rpb24uZmlsZVBhdGgpKVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZyb21KUyhzdGF0ZSkucHVzaCh7XG4gICAgICAgICAgJ2ZpbGVQYXRoJzogYWN0aW9uLmZpbGVQYXRoLFxuICAgICAgICAgICdzZXJ2aWNlcyc6IGFjdGlvbi5zZXJ2aWNlcy5tYXAoKHNlcnZpY2UpID0+IGZyb21KUyhzZXJ2aWNlKS5zZXQoJ3VwJywgXCJ1bmtub3duXCIpLnRvSlMoKSksXG4gICAgICAgICAgJ3ZlcnNpb24nOiBhY3Rpb24udmVyc2lvbixcbiAgICAgICAgfSkudG9KUygpO1xuICAgICAgfVxuICAgIGNhc2UgXCJTRVJWSUNFU19SRUZSRVNIRURcIjpcbiAgICAgIGluZGV4ID0gc3RhdGUuZmluZEluZGV4KGZpbGUgPT4gZmlsZS5maWxlUGF0aCA9PSBhY3Rpb24uZmlsZVBhdGgpO1xuICAgICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICAgIHJldHVybiBmcm9tSlMoc3RhdGUpXG4gICAgICAgICAgICAgICAgLnNldEluKFtpbmRleCwgJ3NlcnZpY2VzJ10sIGFjdGlvbi5zZXJ2aWNlcy5tYXAoKHNlcnZpY2UpID0+IGZyb21KUyhzZXJ2aWNlKS5zZXQoJ3VwJywgXCJ1bmtub3duXCIpLnRvSlMoKSkpXG4gICAgICAgICAgICAgICAgLnRvSlMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgICBjYXNlIFwiU0VSVklDRV9TVEFURV9DSEFOR0VEXCI6XG4gICAgICByZXR1cm4gZnJvbUpTKHN0YXRlKS5tYXAoY29uZiA9PiBjb25mLnVwZGF0ZSgnc2VydmljZXMnLCBzZXJ2aWNlcyA9PiB7XG4gICAgICAgIHJldHVybiBzZXJ2aWNlcy5tYXAoc2VydmljZSA9PiB7XG4gICAgICAgICAgbGV0IG5ld19zZXJ2aWNlID0gZnJvbUpTKGFjdGlvbikuZ2V0KCdzZXJ2aWNlcycpLmZpbmQocyA9PiB7XG4gICAgICAgICAgICBsZXQgbiA9IHMuZ2V0KCduYW1lJyk7XG4gICAgICAgICAgICByZXR1cm4gbiA9PSBzZXJ2aWNlLmdldCgnbmFtZScpIHx8IG4gPT0gc2VydmljZS5nZXQoJ2NvbnRhaW5lcl9uYW1lJyk7XG4gICAgICAgICAgfSwge30sIGZyb21KUyh7fSkpO1xuXG4gICAgICAgICAgcmV0dXJuIHNlcnZpY2Uuc2V0KCd1cCcsIG5ld19zZXJ2aWNlLmdldCgndXAnLCAndW5rbm93bicpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSkudG9KUygpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG4iXX0=