Object.defineProperty(exports, "__esModule", {
  value: true
});

var _child_process = require('child_process');

var cp = _interopRequireWildcard(_child_process);

var _languageclient = require('./languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _logger = require('./logger');

var _serverManager = require('./server-manager.js');

var _convert = require('./convert.js');

var _convert2 = _interopRequireDefault(_convert);

var _applyEditAdapter = require('./adapters/apply-edit-adapter');

var _applyEditAdapter2 = _interopRequireDefault(_applyEditAdapter);

var _autocompleteAdapter = require('./adapters/autocomplete-adapter');

var _autocompleteAdapter2 = _interopRequireDefault(_autocompleteAdapter);

var _codeActionAdapter = require('./adapters/code-action-adapter');

var _codeActionAdapter2 = _interopRequireDefault(_codeActionAdapter);

var _codeFormatAdapter = require('./adapters/code-format-adapter');

var _codeFormatAdapter2 = _interopRequireDefault(_codeFormatAdapter);

var _codeHighlightAdapter = require('./adapters/code-highlight-adapter');

var _codeHighlightAdapter2 = _interopRequireDefault(_codeHighlightAdapter);

var _datatipAdapter = require('./adapters/datatip-adapter');

var _datatipAdapter2 = _interopRequireDefault(_datatipAdapter);

var _definitionAdapter = require('./adapters/definition-adapter');

var _definitionAdapter2 = _interopRequireDefault(_definitionAdapter);

var _documentSyncAdapter = require('./adapters/document-sync-adapter');

var _documentSyncAdapter2 = _interopRequireDefault(_documentSyncAdapter);

var _findReferencesAdapter = require('./adapters/find-references-adapter');

var _findReferencesAdapter2 = _interopRequireDefault(_findReferencesAdapter);

var _linterPushV2Adapter = require('./adapters/linter-push-v2-adapter');

var _linterPushV2Adapter2 = _interopRequireDefault(_linterPushV2Adapter);

var _notificationsAdapter = require('./adapters/notifications-adapter');

var _notificationsAdapter2 = _interopRequireDefault(_notificationsAdapter);

var _outlineViewAdapter = require('./adapters/outline-view-adapter');

var _outlineViewAdapter2 = _interopRequireDefault(_outlineViewAdapter);

var _signatureHelpAdapter = require('./adapters/signature-help-adapter');

var _signatureHelpAdapter2 = _interopRequireDefault(_signatureHelpAdapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Public: AutoLanguageClient provides a simple way to have all the supported
// Atom-IDE services wired up entirely for you by just subclassing it and
// implementing startServerProcess/getGrammarScopes/getLanguageName and
// getServerName.
class AutoLanguageClient {
  constructor() {
    this._disposable = new _atom.CompositeDisposable();
    this.processStdErr = '';
  }

  // Available if consumeBusySignal is setup


  // Shared adapters that can take the RPC connection as required


  // You must implement these so we know how to deal with your language and server
  // -------------------------------------------------------------------------

  // Return an array of the grammar scopes you handle, e.g. [ 'source.js' ]
  getGrammarScopes() {
    throw Error('Must implement getGrammarScopes when extending AutoLanguageClient');
  }

  // Return the name of the language you support, e.g. 'JavaScript'
  getLanguageName() {
    throw Error('Must implement getLanguageName when extending AutoLanguageClient');
  }

  // Return the name of your server, e.g. 'Eclipse JDT'
  getServerName() {
    throw Error('Must implement getServerName when extending AutoLanguageClient');
  }

  // Start your server process
  startServerProcess(projectPath) {
    throw Error('Must override startServerProcess to start language server process when extending AutoLanguageClient');
  }

  // You might want to override these for different behavior
  // ---------------------------------------------------------------------------

  // Determine whether we should start a server for a given editor if we don't have one yet
  shouldStartForEditor(editor) {
    return this.getGrammarScopes().includes(editor.getGrammar().scopeName);
  }

  // Return the parameters used to initialize a client - you may want to extend capabilities
  getInitializeParams(projectPath, process) {
    return {
      processId: process.pid,
      rootPath: projectPath,
      rootUri: _convert2.default.pathToUri(projectPath),
      capabilities: {
        workspace: {
          applyEdit: true,
          workspaceEdit: {
            documentChanges: true
          },
          didChangeConfiguration: {
            dynamicRegistration: false
          },
          didChangeWatchedFiles: {
            dynamicRegistration: false
          },
          symbol: {
            dynamicRegistration: false
          },
          executeCommand: {
            dynamicRegistration: false
          }
        },
        textDocument: {
          synchronization: {
            dynamicRegistration: false,
            willSave: true,
            willSaveWaitUntil: false,
            didSave: true
          },
          completion: {
            dynamicRegistration: false,
            completionItem: {
              snippetSupport: true,
              commitCharactersSupport: false
            },
            contextSupport: false
          },
          hover: {
            dynamicRegistration: false
          },
          signatureHelp: {
            dynamicRegistration: false
          },
          references: {
            dynamicRegistration: false
          },
          documentHighlight: {
            dynamicRegistration: false
          },
          documentSymbol: {
            dynamicRegistration: false
          },
          formatting: {
            dynamicRegistration: false
          },
          rangeFormatting: {
            dynamicRegistration: false
          },
          onTypeFormatting: {
            dynamicRegistration: false
          },
          definition: {
            dynamicRegistration: false
          },
          codeAction: {
            dynamicRegistration: false
          },
          codeLens: {
            dynamicRegistration: false
          },
          documentLink: {
            dynamicRegistration: false
          },
          rename: {
            dynamicRegistration: false
          }
        },
        experimental: {}
      }
    };
  }

  // Early wire-up of listeners before initialize method is sent
  preInitialization(connection) {}

  // Late wire-up of listeners after initialize method has been sent
  postInitialization(server) {}

  // Determine whether to use ipc, stdio or socket to connect to the server
  getConnectionType() {
    return this.socket != null ? 'socket' : 'stdio';
  }

  // Default implementation of the rest of the AutoLanguageClient
  // ---------------------------------------------------------------------------

  // Activate does very little for perf reasons - hooks in via ServerManager for later 'activation'
  activate() {
    this.name = `${this.getLanguageName()} (${this.getServerName()})`;
    this.logger = this.getLogger();
    this._serverManager = new _serverManager.ServerManager(p => this.startServer(p), this.logger, e => this.shouldStartForEditor(e), filepath => this.filterChangeWatchedFiles(filepath), () => this.busySignalService, this.getServerName());
    this._serverManager.startListening();
    process.on('exit', () => this.exitCleanup.bind(this));
  }

  exitCleanup() {
    this._serverManager.terminate();
  }

  // Deactivate disposes the resources we're using
  async deactivate() {
    this._disposable.dispose();
    this._serverManager.stopListening();
    await this._serverManager.stopAllServers();
  }

  spawnChildNode(args, options = {}) {
    this.logger.debug(`starting child Node "${args.join(' ')}"`);
    options.env = options.env || Object.create(process.env);
    options.env.ELECTRON_RUN_AS_NODE = '1';
    options.env.ELECTRON_NO_ATTACH_CONSOLE = '1';
    return cp.spawn(process.execPath, args, options);
  }

  // By default LSP logging is switched off but you can switch it on via the core.debugLSP setting
  getLogger() {
    return atom.config.get('core.debugLSP') ? new _logger.ConsoleLogger(this.name) : new _logger.NullLogger();
  }

  // Starts the server by starting the process, then initializing the language server and starting adapters
  async startServer(projectPath) {
    const startingSignal = this.busySignalService && this.busySignalService.reportBusy(`Starting ${this.getServerName()} for ${_path2.default.basename(projectPath)}`);
    let process;
    try {
      process = await this.startServerProcess(projectPath);
    } finally {
      startingSignal && startingSignal.dispose();
    }

    const connection = new ls.LanguageClientConnection(this.createRpcConnection(process), this.logger);
    this.preInitialization(connection);
    const initializeParams = this.getInitializeParams(projectPath, process);
    const initialization = connection.initialize(initializeParams);
    this.busySignalService && this.busySignalService.reportBusyWhile(`${this.getServerName()} initializing for ${_path2.default.basename(projectPath)}`, () => initialization);
    const initializeResponse = await initialization;
    const newServer = {
      projectPath,
      process,
      connection,
      capabilities: initializeResponse.capabilities,
      disposable: new _atom.CompositeDisposable()
    };
    this.postInitialization(newServer);
    connection.initialized();
    this.startExclusiveAdapters(newServer);
    return newServer;
  }

  captureServerErrors(childProcess) {
    childProcess.on('error', err => this.handleSpawnFailure(err));
    childProcess.on('exit', (code, signal) => this.logger.debug(`exited code ${code}`));
    childProcess.stderr.setEncoding('utf8');
    childProcess.stderr.on('data', chunk => {
      const errorString = chunk.toString();
      this.logger.warn('stderr', errorString);
      // Keep the last 5 lines for packages to use in messages
      this.processStdErr = (this.processStdErr + errorString).split('\n').slice(-5).join('\n');
    });
  }

  handleSpawnFailure(err) {
    atom.notifications.addError(`${this.getServerName()} language server for ${this.getLanguageName()} unable to start`, {
      dismissable: true,
      description: err.toString()
    });
  }

  // Creates the RPC connection which can be ipc, socket or stdio
  createRpcConnection(process) {
    let reader, writer;
    const connectionType = this.getConnectionType();
    switch (connectionType) {
      case 'ipc':
        reader = new rpc.IPCMessageReader(process);
        writer = new rpc.IPCMessageWriter(process);
        break;
      case 'socket':
        reader = new rpc.SocketMessageReader(this.socket);
        writer = new rpc.SocketMessageWriter(this.socket);
        break;
      case 'stdio':
        reader = new rpc.StreamMessageReader(process.stdout);
        writer = new rpc.StreamMessageWriter(process.stdin);
        break;
    }

    return rpc.createMessageConnection(reader, writer, {
      error: m => {
        this.logger.error(m);
      }
    });
  }

  // Start adapters that are not shared between servers
  startExclusiveAdapters(server) {
    _applyEditAdapter2.default.attach(server.connection);
    _notificationsAdapter2.default.attach(server.connection, this.name);

    if (_documentSyncAdapter2.default.canAdapt(server.capabilities)) {
      server.docSyncAdapter = new _documentSyncAdapter2.default(server.connection, server.capabilities.textDocumentSync, editor => this.shouldSyncForEditor(editor, server.projectPath));
      server.disposable.add(server.docSyncAdapter);
    }

    server.linterPushV2 = new _linterPushV2Adapter2.default(server.connection);
    if (this._linterDelegate != null) {
      server.linterPushV2.attach(this._linterDelegate);
    }

    if (_signatureHelpAdapter2.default.canAdapt(server.capabilities)) {
      server.signatureHelpAdapter = new _signatureHelpAdapter2.default(server, this.getGrammarScopes());
      if (this._signatureHelpRegistry != null) {
        server.signatureHelpAdapter.attach(this._signatureHelpRegistry);
      }
    }
  }

  shouldSyncForEditor(editor, projectPath) {
    return this.isFileInProject(editor, projectPath) && this.shouldStartForEditor(editor);
  }

  isFileInProject(editor, projectPath) {
    return (editor.getURI() || '').startsWith(projectPath);
  }

  // Autocomplete+ via LS completion---------------------------------------
  provideAutocomplete() {
    return {
      selector: this.getGrammarScopes().map(g => '.' + g).join(', '),
      inclusionPriority: 1,
      suggestionPriority: 2,
      excludeLowerPriority: false,
      getSuggestions: this.getSuggestions.bind(this),
      getSuggestionDetailsOnSelect: this.getSuggestionDetailsOnSelect.bind(this)
    };
  }

  async getSuggestions(request) {
    const server = await this._serverManager.getServer(request.editor);
    if (server == null || !_autocompleteAdapter2.default.canAdapt(server.capabilities)) {
      return [];
    }

    this.autoComplete = this.autoComplete || new _autocompleteAdapter2.default();
    this._lastAutocompleteRequest = request;
    return this.autoComplete.getSuggestions(server.connection, request, this.onDidConvertAutocomplete);
  }

  async getSuggestionDetailsOnSelect(suggestion) {
    const request = this._lastAutocompleteRequest;
    if (request == null) {
      return null;
    }
    const server = await this._serverManager.getServer(request.editor);
    if (server == null || !_autocompleteAdapter2.default.canAdapt(server.capabilities) || this.autoComplete == null) {
      return null;
    }

    return this.autoComplete.completeSuggestion(server.connection, suggestion, request, this.onDidConvertAutocomplete);
  }

  onDidConvertAutocomplete(completionItem, suggestion, request) {}

  // Definitions via LS documentHighlight and gotoDefinition------------
  provideDefinitions() {
    return {
      name: this.name,
      priority: 20,
      grammarScopes: this.getGrammarScopes(),
      getDefinition: this.getDefinition.bind(this)
    };
  }

  async getDefinition(editor, point) {
    const server = await this._serverManager.getServer(editor);
    if (server == null || !_definitionAdapter2.default.canAdapt(server.capabilities)) {
      return null;
    }

    this.definitions = this.definitions || new _definitionAdapter2.default();
    return this.definitions.getDefinition(server.connection, server.capabilities, this.getLanguageName(), editor, point);
  }

  // Outline View via LS documentSymbol---------------------------------
  provideOutlines() {
    return {
      name: this.name,
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getOutline: this.getOutline.bind(this)
    };
  }

  async getOutline(editor) {
    const server = await this._serverManager.getServer(editor);
    if (server == null || !_outlineViewAdapter2.default.canAdapt(server.capabilities)) {
      return null;
    }

    this.outlineView = this.outlineView || new _outlineViewAdapter2.default();
    return this.outlineView.getOutline(server.connection, editor);
  }

  // Linter push v2 API via LS publishDiagnostics
  consumeLinterV2(registerIndie) {
    this._linterDelegate = registerIndie({ name: this.name });
    if (this._linterDelegate == null) {
      return;
    }

    for (const server of this._serverManager.getActiveServers()) {
      if (server.linterPushV2 != null) {
        server.linterPushV2.attach(this._linterDelegate);
      }
    }
  }

  // Find References via LS findReferences------------------------------
  provideFindReferences() {
    return {
      isEditorSupported: editor => this.getGrammarScopes().includes(editor.getGrammar().scopeName),
      findReferences: this.getReferences.bind(this)
    };
  }

  async getReferences(editor, point) {
    const server = await this._serverManager.getServer(editor);
    if (server == null || !_findReferencesAdapter2.default.canAdapt(server.capabilities)) {
      return null;
    }

    this.findReferences = this.findReferences || new _findReferencesAdapter2.default();
    return this.findReferences.getReferences(server.connection, editor, point, server.projectPath);
  }

  // Datatip via LS textDocument/hover----------------------------------
  consumeDatatip(service) {
    this._disposable.add(service.addProvider({
      providerName: this.name,
      priority: 1,
      grammarScopes: this.getGrammarScopes(),
      validForScope: scopeName => {
        return this.getGrammarScopes().includes(scopeName);
      },
      datatip: this.getDatatip.bind(this)
    }));
  }

  async getDatatip(editor, point) {
    const server = await this._serverManager.getServer(editor);
    if (server == null || !_datatipAdapter2.default.canAdapt(server.capabilities)) {
      return null;
    }

    this.datatip = this.datatip || new _datatipAdapter2.default();
    return this.datatip.getDatatip(server.connection, editor, point);
  }

  // Code Format via LS formatDocument & formatDocumentRange------------
  provideCodeFormat() {
    return {
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      formatCode: this.getCodeFormat.bind(this)
    };
  }

  async getCodeFormat(editor, range) {
    const server = await this._serverManager.getServer(editor);
    if (server == null || !_codeFormatAdapter2.default.canAdapt(server.capabilities)) {
      return [];
    }

    return _codeFormatAdapter2.default.format(server.connection, server.capabilities, editor, range);
  }

  provideCodeHighlight() {
    return {
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      highlight: (editor, position) => {
        return this.getCodeHighlight(editor, position);
      }
    };
  }

  async getCodeHighlight(editor, position) {
    const server = await this._serverManager.getServer(editor);
    if (server == null || !_codeHighlightAdapter2.default.canAdapt(server.capabilities)) {
      return null;
    }

    return _codeHighlightAdapter2.default.highlight(server.connection, server.capabilities, editor, position);
  }

  provideCodeActions() {
    return {
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getCodeActions: (editor, range, diagnostics) => {
        return this.getCodeActions(editor, range, diagnostics);
      }
    };
  }

  async getCodeActions(editor, range, diagnostics) {
    const server = await this._serverManager.getServer(editor);
    if (server == null || !_codeActionAdapter2.default.canAdapt(server.capabilities)) {
      return null;
    }

    return _codeActionAdapter2.default.getCodeActions(server.connection, server.capabilities, server.linterPushV2, editor, range, diagnostics);
  }

  consumeSignatureHelp(registry) {
    this._signatureHelpRegistry = registry;
    for (const server of this._serverManager.getActiveServers()) {
      if (server.signatureHelpAdapter != null) {
        server.signatureHelpAdapter.attach(registry);
      }
    }
    return new _atom.Disposable(() => {
      this._signatureHelpRegistry = null;
    });
  }

  consumeBusySignal(service) {
    this.busySignalService = service;
    return new _atom.Disposable(() => delete this.busySignalService);
  }

  /**
   * `didChangeWatchedFiles` message filtering, override for custom logic.
   * @param filePath path of a file that has changed in the project path
   * @return false => message will not be sent to the language server
   */
  filterChangeWatchedFiles(filePath) {
    return true;
  }
}
exports.default = AutoLanguageClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,