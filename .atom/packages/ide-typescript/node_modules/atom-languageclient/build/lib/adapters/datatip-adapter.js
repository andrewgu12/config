"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("../convert");
const utils_1 = require("../utils");
// Public: Adapts the language server protocol "textDocument/hover" to the
// Atom IDE UI Datatip package.
class DatatipAdapter {
    // Public: Determine whether this adapter can be used to adapt a language server
    // based on the serverCapabilities matrix containing a hoverProvider.
    //
    // * `serverCapabilities` The {ServerCapabilities} of the language server to consider.
    //
    // Returns a {Boolean} indicating adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return serverCapabilities.hoverProvider === true;
    }
    // Public: Get the Datatip for this {Point} in a {TextEditor} by querying
    // the language server.
    //
    // * `connection` A {LanguageClientConnection} to the language server that will be queried
    //                for the hover text/datatip.
    // * `editor` The Atom {TextEditor} containing the text the Datatip should relate to.
    // * `point` The Atom {Point} containing the point within the text the Datatip should relate to.
    //
    // Returns a {Promise} containing the {Datatip} to display or {null} if no Datatip is available.
    getDatatip(connection, editor, point) {
        return __awaiter(this, void 0, void 0, function* () {
            const documentPositionParams = convert_1.default.editorToTextDocumentPositionParams(editor, point);
            const hover = yield connection.hover(documentPositionParams);
            if (hover == null ||
                hover.contents == null ||
                (typeof hover.contents === 'string' && hover.contents.length === 0) ||
                (Array.isArray(hover.contents) && hover.contents.length === 0)) {
                return null;
            }
            const range = hover.range == null ? utils_1.default.getWordAtPosition(editor, point) : convert_1.default.lsRangeToAtomRange(hover.range);
            const markedStrings = (Array.isArray(hover.contents) ? hover.contents : [hover.contents]).map((str) => DatatipAdapter.convertMarkedString(editor, str));
            return { range, markedStrings };
        });
    }
    static convertMarkedString(editor, markedString) {
        if (typeof markedString === 'string') {
            return { type: 'markdown', value: markedString };
        }
        if (markedString.kind) {
            return {
                type: 'markdown',
                value: markedString.value,
            };
        }
        // Must check as <{language: string}> to disambiguate between
        // string and the more explicit object type because MarkedString
        // is a union of the two types
        if (markedString.language) {
            return {
                type: 'snippet',
                // TODO: find a better mapping from language -> grammar
                grammar: atom.grammars.grammarForScopeName(`source.${markedString.language}`) || editor.getGrammar(),
                value: markedString.value,
            };
        }
        // Catch-all case
        return { type: 'markdown', value: markedString.toString() };
    }
}
exports.default = DatatipAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRpcC1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2FkYXB0ZXJzL2RhdGF0aXAtYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBU0Esd0NBQWlDO0FBQ2pDLG9DQUE2QjtBQUU3QiwwRUFBMEU7QUFDMUUsK0JBQStCO0FBQy9CO0lBQ0UsZ0ZBQWdGO0lBQ2hGLHFFQUFxRTtJQUNyRSxFQUFFO0lBQ0Ysc0ZBQXNGO0lBQ3RGLEVBQUU7SUFDRiwyRUFBMkU7SUFDM0UsNEJBQTRCO0lBQ3JCLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQXNDO1FBQzNELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDO0lBQ25ELENBQUM7SUFFRCx5RUFBeUU7SUFDekUsdUJBQXVCO0lBQ3ZCLEVBQUU7SUFDRiwwRkFBMEY7SUFDMUYsNkNBQTZDO0lBQzdDLHFGQUFxRjtJQUNyRixnR0FBZ0c7SUFDaEcsRUFBRTtJQUNGLGdHQUFnRztJQUNuRixVQUFVLENBQ3JCLFVBQW9DLEVBQ3BDLE1BQWtCLEVBQ2xCLEtBQVk7O1lBRVosTUFBTSxzQkFBc0IsR0FBRyxpQkFBTyxDQUFDLGtDQUFrQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV6RixNQUFNLEtBQUssR0FBRyxNQUFNLFVBQVUsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUM3RCxFQUFFLENBQUMsQ0FDRCxLQUFLLElBQUksSUFBSTtnQkFDYixLQUFLLENBQUMsUUFBUSxJQUFJLElBQUk7Z0JBQ3RCLENBQUMsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7Z0JBQ25FLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUMvRCxDQUFDLENBQUMsQ0FBQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELE1BQU0sS0FBSyxHQUNULEtBQUssQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV6RyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ3BHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQ2hELENBQUM7WUFFRixNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUM7UUFDbEMsQ0FBQztLQUFBO0lBRU8sTUFBTSxDQUFDLG1CQUFtQixDQUNoQyxNQUFrQixFQUNsQixZQUEwQztRQUUxQyxFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxDQUFDO1FBQ25ELENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBRSxZQUE4QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDekMsTUFBTSxDQUFDO2dCQUNMLElBQUksRUFBRSxVQUFVO2dCQUNoQixLQUFLLEVBQUUsWUFBWSxDQUFDLEtBQUs7YUFDMUIsQ0FBQztRQUNKLENBQUM7UUFFRCw2REFBNkQ7UUFDN0QsZ0VBQWdFO1FBQ2hFLDhCQUE4QjtRQUM5QixFQUFFLENBQUMsQ0FBRSxZQUFtQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDO2dCQUNMLElBQUksRUFBRSxTQUFTO2dCQUNmLHVEQUF1RDtnQkFDdkQsT0FBTyxFQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQy9CLFVBQVcsWUFBbUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Z0JBQ3JGLEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSzthQUMxQixDQUFDO1FBQ0osQ0FBQztRQUVELGlCQUFpQjtRQUNqQixNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0NBQ0Y7QUFoRkQsaUNBZ0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXHJcbiAgTWFya3VwQ29udGVudCxcclxuICBNYXJrZWRTdHJpbmcsXHJcbiAgU2VydmVyQ2FwYWJpbGl0aWVzLFxyXG4gIE1hcmt1cEtpbmQsXHJcbn0gZnJvbSAnLi4vbGFuZ3VhZ2VjbGllbnQnO1xyXG5pbXBvcnQgeyBQb2ludCwgVGV4dEVkaXRvciwgUmFuZ2UgfSBmcm9tICdhdG9tJztcclxuaW1wb3J0ICogYXMgYXRvbUlkZSBmcm9tICdhdG9tLWlkZSc7XHJcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuLy8gUHVibGljOiBBZGFwdHMgdGhlIGxhbmd1YWdlIHNlcnZlciBwcm90b2NvbCBcInRleHREb2N1bWVudC9ob3ZlclwiIHRvIHRoZVxyXG4vLyBBdG9tIElERSBVSSBEYXRhdGlwIHBhY2thZ2UuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGF0aXBBZGFwdGVyIHtcclxuICAvLyBQdWJsaWM6IERldGVybWluZSB3aGV0aGVyIHRoaXMgYWRhcHRlciBjYW4gYmUgdXNlZCB0byBhZGFwdCBhIGxhbmd1YWdlIHNlcnZlclxyXG4gIC8vIGJhc2VkIG9uIHRoZSBzZXJ2ZXJDYXBhYmlsaXRpZXMgbWF0cml4IGNvbnRhaW5pbmcgYSBob3ZlclByb3ZpZGVyLlxyXG4gIC8vXHJcbiAgLy8gKiBgc2VydmVyQ2FwYWJpbGl0aWVzYCBUaGUge1NlcnZlckNhcGFiaWxpdGllc30gb2YgdGhlIGxhbmd1YWdlIHNlcnZlciB0byBjb25zaWRlci5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7Qm9vbGVhbn0gaW5kaWNhdGluZyBhZGFwdGVyIGNhbiBhZGFwdCB0aGUgc2VydmVyIGJhc2VkIG9uIHRoZVxyXG4gIC8vIGdpdmVuIHNlcnZlckNhcGFiaWxpdGllcy5cclxuICBwdWJsaWMgc3RhdGljIGNhbkFkYXB0KHNlcnZlckNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gc2VydmVyQ2FwYWJpbGl0aWVzLmhvdmVyUHJvdmlkZXIgPT09IHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IEdldCB0aGUgRGF0YXRpcCBmb3IgdGhpcyB7UG9pbnR9IGluIGEge1RleHRFZGl0b3J9IGJ5IHF1ZXJ5aW5nXHJcbiAgLy8gdGhlIGxhbmd1YWdlIHNlcnZlci5cclxuICAvL1xyXG4gIC8vICogYGNvbm5lY3Rpb25gIEEge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbn0gdG8gdGhlIGxhbmd1YWdlIHNlcnZlciB0aGF0IHdpbGwgYmUgcXVlcmllZFxyXG4gIC8vICAgICAgICAgICAgICAgIGZvciB0aGUgaG92ZXIgdGV4dC9kYXRhdGlwLlxyXG4gIC8vICogYGVkaXRvcmAgVGhlIEF0b20ge1RleHRFZGl0b3J9IGNvbnRhaW5pbmcgdGhlIHRleHQgdGhlIERhdGF0aXAgc2hvdWxkIHJlbGF0ZSB0by5cclxuICAvLyAqIGBwb2ludGAgVGhlIEF0b20ge1BvaW50fSBjb250YWluaW5nIHRoZSBwb2ludCB3aXRoaW4gdGhlIHRleHQgdGhlIERhdGF0aXAgc2hvdWxkIHJlbGF0ZSB0by5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gY29udGFpbmluZyB0aGUge0RhdGF0aXB9IHRvIGRpc3BsYXkgb3Ige251bGx9IGlmIG5vIERhdGF0aXAgaXMgYXZhaWxhYmxlLlxyXG4gIHB1YmxpYyBhc3luYyBnZXREYXRhdGlwKFxyXG4gICAgY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxyXG4gICAgZWRpdG9yOiBUZXh0RWRpdG9yLFxyXG4gICAgcG9pbnQ6IFBvaW50LFxyXG4gICk6IFByb21pc2U8YXRvbUlkZS5EYXRhdGlwIHwgbnVsbD4ge1xyXG4gICAgY29uc3QgZG9jdW1lbnRQb3NpdGlvblBhcmFtcyA9IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyhlZGl0b3IsIHBvaW50KTtcclxuXHJcbiAgICBjb25zdCBob3ZlciA9IGF3YWl0IGNvbm5lY3Rpb24uaG92ZXIoZG9jdW1lbnRQb3NpdGlvblBhcmFtcyk7XHJcbiAgICBpZiAoXHJcbiAgICAgIGhvdmVyID09IG51bGwgfHxcclxuICAgICAgaG92ZXIuY29udGVudHMgPT0gbnVsbCB8fFxyXG4gICAgICAodHlwZW9mIGhvdmVyLmNvbnRlbnRzID09PSAnc3RyaW5nJyAmJiBob3Zlci5jb250ZW50cy5sZW5ndGggPT09IDApIHx8XHJcbiAgICAgIChBcnJheS5pc0FycmF5KGhvdmVyLmNvbnRlbnRzKSAmJiBob3Zlci5jb250ZW50cy5sZW5ndGggPT09IDApXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmFuZ2UgPVxyXG4gICAgICBob3Zlci5yYW5nZSA9PSBudWxsID8gVXRpbHMuZ2V0V29yZEF0UG9zaXRpb24oZWRpdG9yLCBwb2ludCkgOiBDb252ZXJ0LmxzUmFuZ2VUb0F0b21SYW5nZShob3Zlci5yYW5nZSk7XHJcblxyXG4gICAgY29uc3QgbWFya2VkU3RyaW5ncyA9IChBcnJheS5pc0FycmF5KGhvdmVyLmNvbnRlbnRzKSA/IGhvdmVyLmNvbnRlbnRzIDogW2hvdmVyLmNvbnRlbnRzXSkubWFwKChzdHIpID0+XHJcbiAgICAgIERhdGF0aXBBZGFwdGVyLmNvbnZlcnRNYXJrZWRTdHJpbmcoZWRpdG9yLCBzdHIpLFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4geyByYW5nZSwgbWFya2VkU3RyaW5ncyB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgY29udmVydE1hcmtlZFN0cmluZyhcclxuICAgIGVkaXRvcjogVGV4dEVkaXRvcixcclxuICAgIG1hcmtlZFN0cmluZzogTWFya2VkU3RyaW5nIHwgTWFya3VwQ29udGVudCxcclxuICApOiBhdG9tSWRlLk1hcmtlZFN0cmluZyB7XHJcbiAgICBpZiAodHlwZW9mIG1hcmtlZFN0cmluZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgcmV0dXJuIHsgdHlwZTogJ21hcmtkb3duJywgdmFsdWU6IG1hcmtlZFN0cmluZyB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgobWFya2VkU3RyaW5nIGFzIE1hcmt1cENvbnRlbnQpLmtpbmQpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAnbWFya2Rvd24nLFxyXG4gICAgICAgIHZhbHVlOiBtYXJrZWRTdHJpbmcudmFsdWUsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTXVzdCBjaGVjayBhcyA8e2xhbmd1YWdlOiBzdHJpbmd9PiB0byBkaXNhbWJpZ3VhdGUgYmV0d2VlblxyXG4gICAgLy8gc3RyaW5nIGFuZCB0aGUgbW9yZSBleHBsaWNpdCBvYmplY3QgdHlwZSBiZWNhdXNlIE1hcmtlZFN0cmluZ1xyXG4gICAgLy8gaXMgYSB1bmlvbiBvZiB0aGUgdHdvIHR5cGVzXHJcbiAgICBpZiAoKG1hcmtlZFN0cmluZyBhcyB7bGFuZ3VhZ2U6IHN0cmluZ30pLmxhbmd1YWdlKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogJ3NuaXBwZXQnLFxyXG4gICAgICAgIC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgbWFwcGluZyBmcm9tIGxhbmd1YWdlIC0+IGdyYW1tYXJcclxuICAgICAgICBncmFtbWFyOlxyXG4gICAgICAgICAgYXRvbS5ncmFtbWFycy5ncmFtbWFyRm9yU2NvcGVOYW1lKFxyXG4gICAgICAgICAgICBgc291cmNlLiR7KG1hcmtlZFN0cmluZyBhcyB7bGFuZ3VhZ2U6IHN0cmluZ30pLmxhbmd1YWdlfWApIHx8IGVkaXRvci5nZXRHcmFtbWFyKCksXHJcbiAgICAgICAgdmFsdWU6IG1hcmtlZFN0cmluZy52YWx1ZSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDYXRjaC1hbGwgY2FzZVxyXG4gICAgcmV0dXJuIHsgdHlwZTogJ21hcmtkb3duJywgdmFsdWU6IG1hcmtlZFN0cmluZy50b1N0cmluZygpIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==