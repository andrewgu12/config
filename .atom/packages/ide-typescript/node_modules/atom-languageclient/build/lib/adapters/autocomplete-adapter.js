Object.defineProperty(exports, "__esModule", {
  value: true
});

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Public: Adapts the language server protocol "textDocument/completion" to the Atom
// AutoComplete+ package.
class AutocompleteAdapter {
  constructor() {
    this._lastSuggestions = new Map();
  }

  static canAdapt(serverCapabilities) {
    return serverCapabilities.completionProvider != null;
  }

  // Public: Obtain suggestion list for AutoComplete+ by querying the language server using
  // the `textDocument/completion` request.
  //
  // * `connection` A {LanguageClientConnection} to the language server to query.
  // * `request` The {atom$AutocompleteRequest} to satisfy.
  // * `onDidConvertCompletionItem` A function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
  //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
  //
  // Returns a {Promise} of an {Array} of {atom$AutocompleteSuggestion}s containing the
  // AutoComplete+ suggestions to display.
  async getSuggestions(connection, request, onDidConvertCompletionItem) {
    const items = await connection.completion(AutocompleteAdapter.requestToTextDocumentPositionParams(request));
    this._lastSuggestions = this.completionItemsToSuggestions(items, request, onDidConvertCompletionItem);
    return Array.from(this._lastSuggestions.keys());
  }

  // Public: Obtain a complete version of a suggestion with additional information
  // the language server can provide by way of the `completionItem/resolve` request.
  //
  // * `connection` A {LanguageClientConnection} to the language server to query.
  // * `request` An {Object} with the AutoComplete+ request to satisfy.
  //
  // Returns a {Promise} of an {atom$AutocompleteSuggestion} with the resolved AutoComplete+
  // suggestion.
  async completeSuggestion(connection, suggestion, request, onDidConvertCompletionItem) {
    const originalCompletionItem = this._lastSuggestions.get(suggestion);
    if (originalCompletionItem != null && originalCompletionItem[1] === false) {
      const resolveCompletionItem = await connection.completionItemResolve(originalCompletionItem[0]);
      if (resolveCompletionItem != null) {
        AutocompleteAdapter.completionItemToSuggestion(resolveCompletionItem, suggestion, request, onDidConvertCompletionItem);
      }
    }

    return suggestion;
  }

  // Public: Create TextDocumentPositionParams to be sent to the language server
  // based on the editor and position from the AutoCompleteRequest.
  //
  // * `request` The {atom$AutocompleteRequest} to satisfy.
  //
  // Returns an {TextDocumentPositionParams} with the keys:
  //  * `textDocument` the language server protocol textDocument identification.
  //  * `position` the position within the text document to display completion request for.
  static requestToTextDocumentPositionParams(request) {
    return {
      textDocument: _convert2.default.editorToTextDocumentIdentifier(request.editor),
      position: _convert2.default.pointToPosition(request.bufferPosition)
    };
  }

  // Public: Convert a language server protocol CompletionItem array or CompletionList to
  // an array of ordered AutoComplete+ suggestions.
  //
  // * `completionItems` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //           items to be converted.
  // * `request` The {atom$AutocompleteRequest} to satisfy.
  // * `onDidConvertCompletionItem` A function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
  //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
  //
  // Returns a {Map} of AutoComplete+ suggestions ordered by the CompletionItems sortText.
  completionItemsToSuggestions(completionItems, request, onDidConvertCompletionItem) {
    return new Map((Array.isArray(completionItems) ? completionItems : completionItems.items || []).sort((a, b) => (a.sortText || a.label).localeCompare(b.sortText || b.label)).map(s => [AutocompleteAdapter.completionItemToSuggestion(s, {}, request, onDidConvertCompletionItem), [s, false]]));
  }

  // Public: Convert a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {CompletionItem} containing a completion item to be converted.
  // * `suggestion` A {atom$AutocompleteSuggestion} to have the conversion applied to.
  // * `request` The {atom$AutocompleteRequest} to satisfy.
  // * `onDidConvertCompletionItem` A function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
  //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
  //
  // Returns the {atom$AutocompleteSuggestion} passed in as suggestion with the conversion applied.
  static completionItemToSuggestion(item, suggestion, request, onDidConvertCompletionItem) {
    AutocompleteAdapter.applyCompletionItemToSuggestion(item, suggestion);
    AutocompleteAdapter.applyTextEditToSuggestion(item.textEdit, request.editor, suggestion);
    if (onDidConvertCompletionItem != null) {
      onDidConvertCompletionItem(item, suggestion, request);
    }
    return suggestion;
  }

  // Public: Convert the primary parts of a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {CompletionItem} containing the completion items to be merged into.
  // * `suggestion` The {atom$AutocompleteSuggestion} to merge the conversion into.
  //
  // Returns an {atom$AutocompleteSuggestion} created from the {CompletionItem}.
  static applyCompletionItemToSuggestion(item, suggestion) {
    suggestion.text = item.insertText || item.label;
    suggestion.displayText = item.label;
    suggestion.snippet = item.insertTextFormat === 2 ? item.insertText : undefined;
    suggestion.type = AutocompleteAdapter.completionKindToSuggestionType(item.kind);
    suggestion.rightLabel = item.detail;
    suggestion.description = item.documentation;
    suggestion.descriptionMarkdown = item.documentation;
  }

  // Public: Applies the textEdit part of a language server protocol CompletionItem to an
  // AutoComplete+ Suggestion via the replacementPrefix and text properties.
  //
  // * `textEdit` A {TextEdit} from a CompletionItem to apply.
  // * `editor` An Atom {TextEditor} used to obtain the necessary text replacement.
  // * `suggestion` An {atom$AutocompleteSuggestion} to set the replacementPrefix and text properties of.
  static applyTextEditToSuggestion(textEdit, editor, suggestion) {
    if (textEdit != null) {
      suggestion.replacementPrefix = editor.getTextInBufferRange(_convert2.default.lsRangeToAtomRange(textEdit.range));
      suggestion.text = textEdit.newText;
    }
  }

  // Public: Obtain the textual suggestion type required by AutoComplete+ that
  // most closely maps to the numeric completion kind supplies by the language server.
  //
  // * `kind` A {Number} that represents the suggestion kind to be converted.
  //
  // Returns a {String} containing the AutoComplete+ suggestion type equivalent
  // to the given completion kind.
  static completionKindToSuggestionType(kind) {
    switch (kind) {
      case _languageclient.CompletionItemKind.Method:
        return 'method';
      case _languageclient.CompletionItemKind.Function:
      case _languageclient.CompletionItemKind.Constructor:
        return 'function';
      case _languageclient.CompletionItemKind.Field:
      case _languageclient.CompletionItemKind.Property:
        return 'property';
      case _languageclient.CompletionItemKind.Variable:
        return 'variable';
      case _languageclient.CompletionItemKind.Class:
        return 'class';
      case _languageclient.CompletionItemKind.Interface:
        return 'interface';
      case _languageclient.CompletionItemKind.Module:
        return 'module';
      case _languageclient.CompletionItemKind.Unit:
        return 'builtin';
      case _languageclient.CompletionItemKind.Enum:
        return 'enum';
      case _languageclient.CompletionItemKind.Keyword:
        return 'keyword';
      case _languageclient.CompletionItemKind.Snippet:
        return 'snippet';
      case _languageclient.CompletionItemKind.File:
        return 'import';
      case _languageclient.CompletionItemKind.Reference:
        return 'require';
      default:
        return 'value';
    }
  }
}
exports.default = AutocompleteAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,