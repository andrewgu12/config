"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const languageclient_1 = require("../languageclient");
const atom_1 = require("atom");
const convert_1 = require("../convert");
const fuzzaldrin_plus_1 = require("fuzzaldrin-plus");
const utils_1 = require("../utils");
// Public: Adapts the language server protocol "textDocument/completion" to the Atom
// AutoComplete+ package.
class AutocompleteAdapter {
    constructor() {
        this._suggestionCache = new WeakMap();
        this._cancellationTokens = new WeakMap();
    }
    static canAdapt(serverCapabilities) {
        return serverCapabilities.completionProvider != null;
    }
    static canResolve(serverCapabilities) {
        return serverCapabilities.completionProvider != null &&
            serverCapabilities.completionProvider.resolveProvider === true;
    }
    // Public: Obtain suggestion list for AutoComplete+ by querying the language server using
    // the `textDocument/completion` request.
    //
    // * `server` An {ActiveServer} pointing to the language server to query.
    // * `request` The {atom$AutocompleteRequest} to satisfy.
    // * `onDidConvertCompletionItem` An optional function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
    //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
    //
    // Returns a {Promise} of an {Array} of {atom$AutocompleteSuggestion}s containing the
    // AutoComplete+ suggestions to display.
    getSuggestions(server, request, onDidConvertCompletionItem, minimumWordLength) {
        return __awaiter(this, void 0, void 0, function* () {
            const triggerChars = server.capabilities.completionProvider != null ?
                server.capabilities.completionProvider.triggerCharacters || [] : [];
            const triggerChar = AutocompleteAdapter.getTriggerCharacter(request, triggerChars);
            const prefixWithTrigger = triggerChar + request.prefix;
            const triggerColumn = request.bufferPosition.column - prefixWithTrigger.length;
            const triggerPoint = new atom_1.Point(request.bufferPosition.row, triggerColumn);
            // Only auto-trigger on a trigger character or after the minimum number of characters from autocomplete-plus
            minimumWordLength = minimumWordLength || 0;
            if (!request.activatedManually && triggerChar === '' &&
                minimumWordLength > 0 && request.prefix.length < minimumWordLength) {
                return [];
            }
            const cache = this._suggestionCache.get(server);
            let suggestionMap = null;
            // Do we have complete cached suggestions that are still valid for this request
            if (cache && !cache.isIncomplete && cache.triggerChar === triggerChar && cache.triggerPoint.isEqual(triggerPoint)) {
                suggestionMap = cache.suggestionMap;
            }
            else {
                // Our cached suggestions can't be used so obtain new ones from the language server
                const completions = yield utils_1.default.doWithCancellationToken(server.connection, this._cancellationTokens, (cancellationToken) => server.connection.completion(AutocompleteAdapter.createCompletionParams(request, triggerChar), cancellationToken));
                const isIncomplete = !Array.isArray(completions) && completions.isIncomplete;
                suggestionMap = this.completionItemsToSuggestions(completions, request, onDidConvertCompletionItem);
                this._suggestionCache.set(server, { isIncomplete, triggerChar, triggerPoint, suggestionMap });
            }
            // Filter the results to recalculate the score and ordering (unless only triggerChar)
            const suggestions = Array.from(suggestionMap.keys());
            const replacementPrefix = request.prefix != triggerChar ? request.prefix : '';
            AutocompleteAdapter.setReplacementPrefixOnSuggestions(suggestions, replacementPrefix);
            return request.prefix === triggerChar ? suggestions : fuzzaldrin_plus_1.filter(suggestions, request.prefix, { key: 'text' });
        });
    }
    // Public: Obtain a complete version of a suggestion with additional information
    // the language server can provide by way of the `completionItem/resolve` request.
    //
    // * `server` An {ActiveServer} pointing to the language server to query.
    // * `suggestion` An {atom$AutocompleteSuggestion} suggestion that should be resolved.
    // * `request` An {Object} with the AutoComplete+ request to satisfy.
    // * `onDidConvertCompletionItem` An optional function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
    //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
    //
    // Returns a {Promise} of an {atom$AutocompleteSuggestion} with the resolved AutoComplete+ suggestion.
    completeSuggestion(server, suggestion, request, onDidConvertCompletionItem) {
        return __awaiter(this, void 0, void 0, function* () {
            const cache = this._suggestionCache.get(server);
            if (cache) {
                const originalCompletionItem = cache.suggestionMap.get(suggestion);
                if (originalCompletionItem != null && originalCompletionItem[1] === false) {
                    const resolvedCompletionItem = yield server.connection.completionItemResolve(originalCompletionItem[0]);
                    if (resolvedCompletionItem != null) {
                        AutocompleteAdapter.completionItemToSuggestion(resolvedCompletionItem, suggestion, request, onDidConvertCompletionItem);
                        originalCompletionItem[1] = true;
                    }
                }
            }
            return suggestion;
        });
    }
    // Public: Set the replacementPrefix property on all given suggestions to the
    // prefix specified.
    //
    // * `suggestions` An {Array} of {atom$AutocompleteSuggestion}s to set the replacementPrefix on.
    // * `prefix` The {string} containing the prefix that should be set as replacementPrefix on all suggestions.
    static setReplacementPrefixOnSuggestions(suggestions, prefix) {
        for (const suggestion of suggestions) {
            suggestion.replacementPrefix = prefix;
        }
    }
    // Public: Get the trigger character that caused the autocomplete (if any).  This is required because
    // AutoComplete-plus does not have trigger characters.  Although the terminology is 'character' we treat
    // them as variable length strings as this will almost certainly change in the future to support '->' etc.
    //
    // * `request` An {Array} of {atom$AutocompleteSuggestion}s to locate the prefix, editor, bufferPosition etc.
    // * `triggerChars` The {Array} of {string}s that can be trigger characters.
    //
    // Returns a {string} containing the matching trigger character or an empty string if one was not matched.
    static getTriggerCharacter(request, triggerChars) {
        // AutoComplete-Plus considers text after a symbol to be a new trigger. So we should look backward
        // from the current cursor position to see if one is there and thus simulate it.
        const buffer = request.editor.getBuffer();
        const cursor = request.bufferPosition;
        const prefixStartColumn = cursor.column - request.prefix.length;
        for (const triggerChar of triggerChars) {
            if (triggerChar === request.prefix) {
                return triggerChar;
            }
            if (prefixStartColumn >= triggerChar.length) {
                const start = new atom_1.Point(cursor.row, prefixStartColumn - triggerChar.length);
                const possibleTrigger = buffer.getTextInRange([start, [cursor.row, prefixStartColumn]]);
                if (possibleTrigger === triggerChar) {
                    return triggerChar;
                }
            }
        }
        // There was no explicit trigger char
        return '';
    }
    // Public: Create TextDocumentPositionParams to be sent to the language server
    // based on the editor and position from the AutoCompleteRequest.
    //
    // * `request` The {atom$AutocompleteRequest} to obtain the editor from.
    // * `triggerPoint` The {atom$Point} where the trigger started.
    //
    // Returns a {string} containing the prefix including the trigger character.
    static getPrefixWithTrigger(request, triggerPoint) {
        return request.editor
            .getBuffer()
            .getTextInRange([[triggerPoint.row, triggerPoint.column], request.bufferPosition]);
    }
    // Public: Create {CompletionParams} to be sent to the language server
    // based on the editor and position from the Autocomplete request etc.
    //
    // * `request` The {atom$AutocompleteRequest} containing the request details.
    // * `triggerCharacter` The {string} containing the trigger character (empty if none).
    //
    // Returns an {CompletionParams} with the keys:
    //  * `textDocument` the language server protocol textDocument identification.
    //  * `position` the position within the text document to display completion request for.
    //  * `context` containing the trigger character and kind.
    static createCompletionParams(request, triggerCharacter) {
        return {
            textDocument: convert_1.default.editorToTextDocumentIdentifier(request.editor),
            position: convert_1.default.pointToPosition(request.bufferPosition),
            context: AutocompleteAdapter.createCompletionContext(triggerCharacter),
        };
    }
    // Public: Create {CompletionContext} to be sent to the language server
    // based on the trigger character.
    //
    // * `triggerCharacter` The {string} containing the trigger character or '' if none.
    //
    // Returns an {CompletionContext} that specifies the triggerKind and the triggerCharacter
    // if there is one.
    static createCompletionContext(triggerCharacter) {
        return triggerCharacter === ''
            ? { triggerKind: languageclient_1.CompletionTriggerKind.Invoked }
            : { triggerKind: languageclient_1.CompletionTriggerKind.TriggerCharacter, triggerCharacter };
    }
    // Public: Convert a language server protocol CompletionItem array or CompletionList to
    // an array of ordered AutoComplete+ suggestions.
    //
    // * `completionItems` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
    //           items to be converted.
    // * `request` The {atom$AutocompleteRequest} to satisfy.
    // * `onDidConvertCompletionItem` A function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
    //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
    //
    // Returns a {Map} of AutoComplete+ suggestions ordered by the CompletionItems sortText.
    completionItemsToSuggestions(completionItems, request, onDidConvertCompletionItem) {
        return new Map((Array.isArray(completionItems) ? completionItems : completionItems.items || [])
            .sort((a, b) => (a.sortText || a.label).localeCompare(b.sortText || b.label))
            .map((s) => [
            AutocompleteAdapter.completionItemToSuggestion(s, {}, request, onDidConvertCompletionItem),
            [s, false]
        ]));
    }
    // Public: Convert a language server protocol CompletionItem to an AutoComplete+ suggestion.
    //
    // * `item` An {CompletionItem} containing a completion item to be converted.
    // * `suggestion` A {atom$AutocompleteSuggestion} to have the conversion applied to.
    // * `request` The {atom$AutocompleteRequest} to satisfy.
    // * `onDidConvertCompletionItem` A function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
    //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
    //
    // Returns the {atom$AutocompleteSuggestion} passed in as suggestion with the conversion applied.
    static completionItemToSuggestion(item, suggestion, request, onDidConvertCompletionItem) {
        AutocompleteAdapter.applyCompletionItemToSuggestion(item, suggestion);
        AutocompleteAdapter.applyTextEditToSuggestion(item.textEdit, request.editor, suggestion);
        AutocompleteAdapter.applySnippetToSuggestion(item, suggestion);
        if (onDidConvertCompletionItem != null) {
            onDidConvertCompletionItem(item, suggestion, request);
        }
        return suggestion;
    }
    // Public: Convert the primary parts of a language server protocol CompletionItem to an AutoComplete+ suggestion.
    //
    // * `item` An {CompletionItem} containing the completion items to be merged into.
    // * `suggestion` The {atom$AutocompleteSuggestion} to merge the conversion into.
    //
    // Returns an {atom$AutocompleteSuggestion} created from the {CompletionItem}.
    static applyCompletionItemToSuggestion(item, suggestion) {
        suggestion.text = item.insertText || item.label;
        suggestion.displayText = item.label;
        suggestion.type = AutocompleteAdapter.completionKindToSuggestionType(item.kind);
        suggestion.rightLabel = item.detail;
        if (typeof item.documentation === 'object') {
            suggestion.descriptionMarkdown = item.documentation.value;
            suggestion.description = item.documentation.value;
        }
        else {
            suggestion.descriptionMarkdown = item.documentation;
            suggestion.description = item.documentation;
        }
    }
    // Public: Applies the textEdit part of a language server protocol CompletionItem to an
    // AutoComplete+ Suggestion via the replacementPrefix and text properties.
    //
    // * `textEdit` A {TextEdit} from a CompletionItem to apply.
    // * `editor` An Atom {TextEditor} used to obtain the necessary text replacement.
    // * `suggestion` An {atom$AutocompleteSuggestion} to set the replacementPrefix and text properties of.
    static applyTextEditToSuggestion(textEdit, editor, suggestion) {
        if (textEdit) {
            suggestion.replacementPrefix = editor.getTextInBufferRange(convert_1.default.lsRangeToAtomRange(textEdit.range));
            suggestion.text = textEdit.newText;
        }
    }
    // Public: Adds a snippet to the suggestion if the CompletionItem contains
    // snippet-formatted text
    //
    // * `item` An {CompletionItem} containing the completion items to be merged into.
    // * `suggestion` The {atom$AutocompleteSuggestion} to merge the conversion into.
    //
    static applySnippetToSuggestion(item, suggestion) {
        if (item.insertTextFormat === languageclient_1.InsertTextFormat.Snippet) {
            suggestion.snippet = item.textEdit != null ? item.textEdit.newText : item.insertText;
        }
    }
    // Public: Obtain the textual suggestion type required by AutoComplete+ that
    // most closely maps to the numeric completion kind supplies by the language server.
    //
    // * `kind` A {Number} that represents the suggestion kind to be converted.
    //
    // Returns a {String} containing the AutoComplete+ suggestion type equivalent
    // to the given completion kind.
    static completionKindToSuggestionType(kind) {
        switch (kind) {
            case languageclient_1.CompletionItemKind.Constant:
                return 'constant';
            case languageclient_1.CompletionItemKind.Method:
                return 'method';
            case languageclient_1.CompletionItemKind.Function:
            case languageclient_1.CompletionItemKind.Constructor:
                return 'function';
            case languageclient_1.CompletionItemKind.Field:
            case languageclient_1.CompletionItemKind.Property:
                return 'property';
            case languageclient_1.CompletionItemKind.Variable:
                return 'variable';
            case languageclient_1.CompletionItemKind.Class:
                return 'class';
            case languageclient_1.CompletionItemKind.Struct:
            case languageclient_1.CompletionItemKind.TypeParameter:
                return 'type';
            case languageclient_1.CompletionItemKind.Operator:
                return 'selector';
            case languageclient_1.CompletionItemKind.Interface:
                return 'mixin';
            case languageclient_1.CompletionItemKind.Module:
                return 'module';
            case languageclient_1.CompletionItemKind.Unit:
                return 'builtin';
            case languageclient_1.CompletionItemKind.Enum:
            case languageclient_1.CompletionItemKind.EnumMember:
                return 'enum';
            case languageclient_1.CompletionItemKind.Keyword:
                return 'keyword';
            case languageclient_1.CompletionItemKind.Snippet:
                return 'snippet';
            case languageclient_1.CompletionItemKind.File:
            case languageclient_1.CompletionItemKind.Folder:
                return 'import';
            case languageclient_1.CompletionItemKind.Reference:
                return 'require';
            default:
                return 'value';
        }
    }
}
exports.default = AutocompleteAdapter;
//# sourceMappingURL=data:application/json;base64,