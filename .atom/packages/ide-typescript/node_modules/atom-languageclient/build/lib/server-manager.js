"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const convert_1 = require("./convert");
const atom_1 = require("atom");
// Manages the language server lifecycles and their associated objects necessary
// for adapting them to Atom IDE.
class ServerManager {
    constructor(startServer, logger, startForEditor, changeWatchedFileFilter, busySignalServiceGetter, languageServerName) {
        this._activeServers = [];
        this._startingServerPromises = new Map();
        this._restartCounterPerProject = new Map();
        this._stoppingServers = [];
        this._disposable = new atom_1.CompositeDisposable();
        this._editorToServer = new Map();
        this._normalizedProjectPaths = [];
        this._isStarted = false;
        this._languageServerName = languageServerName;
        this._startServer = startServer;
        this._logger = logger;
        this._startForEditor = startForEditor;
        this.updateNormalizedProjectPaths();
        this._changeWatchedFileFilter = changeWatchedFileFilter;
        this._getBusySignalService = busySignalServiceGetter;
    }
    startListening() {
        if (!this._isStarted) {
            this._disposable = new atom_1.CompositeDisposable();
            this._disposable.add(atom.textEditors.observe(this.observeTextEditors.bind(this)));
            this._disposable.add(atom.project.onDidChangePaths(this.projectPathsChanged.bind(this)));
            if (atom.project.onDidChangeFiles) {
                this._disposable.add(atom.project.onDidChangeFiles(this.projectFilesChanged.bind(this)));
            }
        }
    }
    stopListening() {
        if (this._isStarted) {
            this._disposable.dispose();
            this._isStarted = false;
        }
    }
    observeTextEditors(editor) {
        // Track grammar changes for opened editors
        const listener = editor.observeGrammar((grammar) => this._handleGrammarChange(editor));
        this._disposable.add(editor.onDidDestroy(() => listener.dispose()));
        // Try to see if editor can have LS connected to it
        this._handleTextEditor(editor);
    }
    _handleTextEditor(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._editorToServer.has(editor)) {
                // editor hasn't been processed yet, so process it by allocating LS for it if necessary
                const server = yield this.getServer(editor, { shouldStart: true });
                if (server != null) {
                    // There LS for the editor (either started now and already running)
                    this._editorToServer.set(editor, server);
                    this._disposable.add(editor.onDidDestroy(() => {
                        this._editorToServer.delete(editor);
                        this.stopUnusedServers();
                    }));
                }
            }
        });
    }
    _handleGrammarChange(editor) {
        if (this._startForEditor(editor)) {
            // If editor is interesting for LS process the editor further to attempt to start LS if needed
            this._handleTextEditor(editor);
        }
        else {
            // Editor is not supported by the LS
            const server = this._editorToServer.get(editor);
            // If LS is running for the unsupported editor then disconnect the editor from LS and shut down LS if necessary
            if (server) {
                // LS is up for unsupported server
                if (server.docSyncAdapter) {
                    const syncAdapter = server.docSyncAdapter.getEditorSyncAdapter(editor);
                    if (syncAdapter) {
                        // Immitate editor close to disconnect LS from the editor
                        syncAdapter.didClose();
                    }
                }
                // Remove editor from the cache
                this._editorToServer.delete(editor);
                // Shut down LS if it's used by any other editor
                this.stopUnusedServers();
            }
        }
    }
    getActiveServers() {
        return this._activeServers.slice();
    }
    getServer(textEditor, { shouldStart } = { shouldStart: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const finalProjectPath = this.determineProjectPath(textEditor);
            if (finalProjectPath == null) {
                // Files not yet saved have no path
                return null;
            }
            const foundActiveServer = this._activeServers.find((s) => finalProjectPath === s.projectPath);
            if (foundActiveServer) {
                return foundActiveServer;
            }
            const startingPromise = this._startingServerPromises.get(finalProjectPath);
            if (startingPromise) {
                return startingPromise;
            }
            return shouldStart && this._startForEditor(textEditor) ? yield this.startServer(finalProjectPath) : null;
        });
    }
    startServer(projectPath) {
        return __awaiter(this, void 0, void 0, function* () {
            this._logger.debug(`Server starting "${projectPath}"`);
            const startingPromise = this._startServer(projectPath);
            this._startingServerPromises.set(projectPath, startingPromise);
            try {
                const startedActiveServer = yield startingPromise;
                this._activeServers.push(startedActiveServer);
                this._startingServerPromises.delete(projectPath);
                this._logger.debug(`Server started "${projectPath}" (pid ${startedActiveServer.process.pid})`);
                return startedActiveServer;
            }
            catch (e) {
                this._startingServerPromises.delete(projectPath);
                throw e;
            }
        });
    }
    stopUnusedServers() {
        return __awaiter(this, void 0, void 0, function* () {
            const usedServers = new Set(this._editorToServer.values());
            const unusedServers = this._activeServers.filter((s) => !usedServers.has(s));
            if (unusedServers.length > 0) {
                this._logger.debug(`Stopping ${unusedServers.length} unused servers`);
                yield Promise.all(unusedServers.map((s) => this.stopServer(s)));
            }
        });
    }
    stopAllServers() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const [projectPath, restartCounter] of this._restartCounterPerProject) {
                clearTimeout(restartCounter.timerId);
                this._restartCounterPerProject.delete(projectPath);
            }
            yield Promise.all(this._activeServers.map((s) => this.stopServer(s)));
        });
    }
    restartAllServers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.stopListening();
            yield this.stopAllServers();
            this._editorToServer = new Map();
            this.startListening();
        });
    }
    hasServerReachedRestartLimit(server) {
        let restartCounter = this._restartCounterPerProject.get(server.projectPath);
        if (!restartCounter) {
            restartCounter = {
                restarts: 0,
                timerId: setTimeout(() => {
                    this._restartCounterPerProject.delete(server.projectPath);
                }, 3 * 60 * 1000 /* 3 minutes */),
            };
            this._restartCounterPerProject.set(server.projectPath, restartCounter);
        }
        return ++restartCounter.restarts > 5;
    }
    stopServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            const busySignalService = this._getBusySignalService();
            const signal = busySignalService && busySignalService.reportBusy(`Stopping ${this._languageServerName} for ${path.basename(server.projectPath)}`);
            try {
                this._logger.debug(`Server stopping "${server.projectPath}"`);
                // Immediately remove the server to prevent further usage.
                // If we re-open the file after this point, we'll get a new server.
                this._activeServers.splice(this._activeServers.indexOf(server), 1);
                this._stoppingServers.push(server);
                server.disposable.dispose();
                if (server.connection.isConnected) {
                    yield server.connection.shutdown();
                }
                for (const [editor, mappedServer] of this._editorToServer) {
                    if (mappedServer === server) {
                        this._editorToServer.delete(editor);
                    }
                }
                this.exitServer(server);
                this._stoppingServers.splice(this._stoppingServers.indexOf(server), 1);
            }
            finally {
                signal && signal.dispose();
            }
        });
    }
    exitServer(server) {
        const pid = server.process.pid;
        try {
            if (server.connection.isConnected) {
                server.connection.exit();
                server.connection.dispose();
            }
        }
        finally {
            server.process.kill();
        }
        this._logger.debug(`Server stopped "${server.projectPath}" (pid ${pid})`);
    }
    terminate() {
        this._stoppingServers.forEach((server) => {
            this._logger.debug(`Server terminating "${server.projectPath}"`);
            this.exitServer(server);
        });
    }
    determineProjectPath(textEditor) {
        const filePath = textEditor.getPath();
        if (filePath == null) {
            return null;
        }
        return this._normalizedProjectPaths.find((d) => filePath.startsWith(d)) || null;
    }
    updateNormalizedProjectPaths() {
        this._normalizedProjectPaths = atom.project.getDirectories().map((d) => this.normalizePath(d.getPath()));
    }
    normalizePath(projectPath) {
        return !projectPath.endsWith(path.sep) ? path.join(projectPath, path.sep) : projectPath;
    }
    projectPathsChanged(projectPaths) {
        const pathsSet = new Set(projectPaths.map(this.normalizePath));
        const serversToStop = this._activeServers.filter((s) => !pathsSet.has(s.projectPath));
        Promise.all(serversToStop.map((s) => this.stopServer(s)));
        this.updateNormalizedProjectPaths();
    }
    projectFilesChanged(fileEvents) {
        if (this._activeServers.length === 0) {
            return;
        }
        for (const activeServer of this._activeServers) {
            const changes = [];
            for (const fileEvent of fileEvents) {
                if (fileEvent.path.startsWith(activeServer.projectPath) && this._changeWatchedFileFilter(fileEvent.path)) {
                    changes.push(convert_1.default.atomFileEventToLSFileEvents(fileEvent)[0]);
                }
                if (fileEvent.oldPath &&
                    fileEvent.oldPath.startsWith(activeServer.projectPath) &&
                    this._changeWatchedFileFilter(fileEvent.oldPath)) {
                    changes.push(convert_1.default.atomFileEventToLSFileEvents(fileEvent)[1]);
                }
            }
            if (changes.length > 0) {
                activeServer.connection.didChangeWatchedFiles({ changes });
            }
        }
    }
}
exports.ServerManager = ServerManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc2VydmVyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQU1BLDZCQUE2QjtBQUs3Qix1Q0FBZ0M7QUFDaEMsK0JBQXlFO0FBa0N6RSxnRkFBZ0Y7QUFDaEYsaUNBQWlDO0FBQ2pDO0lBZ0JFLFlBQ0UsV0FBMkQsRUFDM0QsTUFBYyxFQUNkLGNBQStDLEVBQy9DLHVCQUFzRCxFQUN0RCx1QkFBK0QsRUFDL0Qsa0JBQTBCO1FBckJwQixtQkFBYyxHQUFtQixFQUFFLENBQUM7UUFDcEMsNEJBQXVCLEdBQXVDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDeEUsOEJBQXlCLEdBQWdDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDbkUscUJBQWdCLEdBQW1CLEVBQUUsQ0FBQztRQUN0QyxnQkFBVyxHQUF3QixJQUFJLDBCQUFtQixFQUFFLENBQUM7UUFDN0Qsb0JBQWUsR0FBa0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUUzRCw0QkFBdUIsR0FBYSxFQUFFLENBQUM7UUFNdkMsZUFBVSxHQUFHLEtBQUssQ0FBQztRQVV6QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsa0JBQWtCLENBQUM7UUFDOUMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLHdCQUF3QixHQUFHLHVCQUF1QixDQUFDO1FBQ3hELElBQUksQ0FBQyxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQztJQUN2RCxDQUFDO0lBRU0sY0FBYztRQUNuQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FB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LENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUMvQyxNQUFNLE9BQU8sR0FBbUIsRUFBRSxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxDQUFDLE1BQU0sU0FBUyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekcsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBTyxDQUFDLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xFLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQ0QsU0FBUyxDQUFDLE9BQU87b0JBQ2pCLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7b0JBQ3RELElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUNqRCxDQUFDLENBQUMsQ0FBQztvQkFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFPLENBQUMsMkJBQTJCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEUsQ0FBQztZQUNILENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLFlBQVksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1lBQzNELENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBMVJELHNDQTBSQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcclxuaW1wb3J0IExpbnRlclB1c2hWMkFkYXB0ZXIgZnJvbSAnLi9hZGFwdGVycy9saW50ZXItcHVzaC12Mi1hZGFwdGVyJztcclxuaW1wb3J0IERvY3VtZW50U3luY0FkYXB0ZXIgZnJvbSAnLi9hZGFwdGVycy9kb2N1bWVudC1zeW5jLWFkYXB0ZXInO1xyXG5pbXBvcnQgU2lnbmF0dXJlSGVscEFkYXB0ZXIgZnJvbSAnLi9hZGFwdGVycy9zaWduYXR1cmUtaGVscC1hZGFwdGVyJztcclxuXHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAqIGFzIHN0cmVhbSBmcm9tICdzdHJlYW0nO1xyXG5pbXBvcnQgKiBhcyBjcCBmcm9tICdjaGlsZF9wcm9jZXNzJztcclxuaW1wb3J0ICogYXMgbHMgZnJvbSAnLi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCAqIGFzIGF0b21JZGUgZnJvbSAnYXRvbS1pZGUnO1xyXG5pbXBvcnQgQ29udmVydCBmcm9tICcuL2NvbnZlcnQnO1xyXG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBQcm9qZWN0RmlsZUV2ZW50LCBUZXh0RWRpdG9yIH0gZnJvbSAnYXRvbSc7XHJcblxyXG4vLyBQdWJsaWM6IERlZmluZXMgdGhlIG1pbmltdW0gc3VyZmFjZSBhcmVhIGZvciBhbiBvYmplY3QgdGhhdCByZXNlbWJsZXMgYVxyXG4vLyBDaGlsZFByb2Nlc3MuICBUaGlzIGlzIHVzZWQgc28gdGhhdCBsYW5ndWFnZSBwYWNrYWdlcyB3aXRoIGFsdGVybmF0aXZlXHJcbi8vIGxhbmd1YWdlIHNlcnZlciBwcm9jZXNzIGhvc3Rpbmcgc3RyYXRlZ2llcyBjYW4gcmV0dXJuIHNvbWV0aGluZyBjb21wYXRpYmxlXHJcbi8vIHdpdGggQXV0b0xhbmd1YWdlQ2xpZW50LnN0YXJ0U2VydmVyUHJvY2Vzcy5cclxuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZVNlcnZlclByb2Nlc3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gIHN0ZGluOiBzdHJlYW0uV3JpdGFibGU7XHJcbiAgc3Rkb3V0OiBzdHJlYW0uUmVhZGFibGU7XHJcbiAgc3RkZXJyOiBzdHJlYW0uUmVhZGFibGU7XHJcbiAgcGlkOiBudW1iZXI7XHJcblxyXG4gIGtpbGwoc2lnbmFsPzogc3RyaW5nKTogdm9pZDtcclxuICBvbihldmVudDogJ2Vycm9yJywgbGlzdGVuZXI6IChlcnI6IEVycm9yKSA9PiB2b2lkKTogdGhpcztcclxuICBvbihldmVudDogJ2V4aXQnLCBsaXN0ZW5lcjogKGNvZGU6IG51bWJlciwgc2lnbmFsOiBzdHJpbmcpID0+IHZvaWQpOiB0aGlzO1xyXG59XHJcblxyXG4vLyBUaGUgbmVjZXNzYXJ5IGVsZW1lbnRzIGZvciBhIHNlcnZlciB0aGF0IGhhcyBzdGFydGVkIG9yIGlzIHN0YXJ0aW5nLlxyXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2ZVNlcnZlciB7XHJcbiAgZGlzcG9zYWJsZTogQ29tcG9zaXRlRGlzcG9zYWJsZTtcclxuICBwcm9qZWN0UGF0aDogc3RyaW5nO1xyXG4gIHByb2Nlc3M6IExhbmd1YWdlU2VydmVyUHJvY2VzcztcclxuICBjb25uZWN0aW9uOiBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb247XHJcbiAgY2FwYWJpbGl0aWVzOiBscy5TZXJ2ZXJDYXBhYmlsaXRpZXM7XHJcbiAgbGludGVyUHVzaFYyPzogTGludGVyUHVzaFYyQWRhcHRlcjtcclxuICBkb2NTeW5jQWRhcHRlcj86IERvY3VtZW50U3luY0FkYXB0ZXI7XHJcbiAgc2lnbmF0dXJlSGVscEFkYXB0ZXI/OiBTaWduYXR1cmVIZWxwQWRhcHRlcjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFJlc3RhcnRDb3VudGVyIHtcclxuICByZXN0YXJ0czogbnVtYmVyO1xyXG4gIHRpbWVySWQ6IE5vZGVKUy5UaW1lcjtcclxufVxyXG5cclxuLy8gTWFuYWdlcyB0aGUgbGFuZ3VhZ2Ugc2VydmVyIGxpZmVjeWNsZXMgYW5kIHRoZWlyIGFzc29jaWF0ZWQgb2JqZWN0cyBuZWNlc3NhcnlcclxuLy8gZm9yIGFkYXB0aW5nIHRoZW0gdG8gQXRvbSBJREUuXHJcbmV4cG9ydCBjbGFzcyBTZXJ2ZXJNYW5hZ2VyIHtcclxuICBwcml2YXRlIF9hY3RpdmVTZXJ2ZXJzOiBBY3RpdmVTZXJ2ZXJbXSA9IFtdO1xyXG4gIHByaXZhdGUgX3N0YXJ0aW5nU2VydmVyUHJvbWlzZXM6IE1hcDxzdHJpbmcsIFByb21pc2U8QWN0aXZlU2VydmVyPj4gPSBuZXcgTWFwKCk7XHJcbiAgcHJpdmF0ZSBfcmVzdGFydENvdW50ZXJQZXJQcm9qZWN0OiBNYXA8c3RyaW5nLCBSZXN0YXJ0Q291bnRlcj4gPSBuZXcgTWFwKCk7XHJcbiAgcHJpdmF0ZSBfc3RvcHBpbmdTZXJ2ZXJzOiBBY3RpdmVTZXJ2ZXJbXSA9IFtdO1xyXG4gIHByaXZhdGUgX2Rpc3Bvc2FibGU6IENvbXBvc2l0ZURpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gIHByaXZhdGUgX2VkaXRvclRvU2VydmVyOiBNYXA8VGV4dEVkaXRvciwgQWN0aXZlU2VydmVyPiA9IG5ldyBNYXAoKTtcclxuICBwcml2YXRlIF9sb2dnZXI6IExvZ2dlcjtcclxuICBwcml2YXRlIF9ub3JtYWxpemVkUHJvamVjdFBhdGhzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIHByaXZhdGUgX3N0YXJ0Rm9yRWRpdG9yOiAoZWRpdG9yOiBUZXh0RWRpdG9yKSA9PiBib29sZWFuO1xyXG4gIHByaXZhdGUgX3N0YXJ0U2VydmVyOiAocHJvamVjdFBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTxBY3RpdmVTZXJ2ZXI+O1xyXG4gIHByaXZhdGUgX2NoYW5nZVdhdGNoZWRGaWxlRmlsdGVyOiAoZmlsZVBhdGg6IHN0cmluZykgPT4gYm9vbGVhbjtcclxuICBwcml2YXRlIF9nZXRCdXN5U2lnbmFsU2VydmljZTogKCkgPT4gYXRvbUlkZS5CdXN5U2lnbmFsU2VydmljZSB8IG51bGw7XHJcbiAgcHJpdmF0ZSBfbGFuZ3VhZ2VTZXJ2ZXJOYW1lOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfaXNTdGFydGVkID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgc3RhcnRTZXJ2ZXI6IChwcm9qZWN0UGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPEFjdGl2ZVNlcnZlcj4sXHJcbiAgICBsb2dnZXI6IExvZ2dlcixcclxuICAgIHN0YXJ0Rm9yRWRpdG9yOiAoZWRpdG9yOiBUZXh0RWRpdG9yKSA9PiBib29sZWFuLFxyXG4gICAgY2hhbmdlV2F0Y2hlZEZpbGVGaWx0ZXI6IChmaWxlUGF0aDogc3RyaW5nKSA9PiBib29sZWFuLFxyXG4gICAgYnVzeVNpZ25hbFNlcnZpY2VHZXR0ZXI6ICgpID0+IGF0b21JZGUuQnVzeVNpZ25hbFNlcnZpY2UgfCBudWxsLFxyXG4gICAgbGFuZ3VhZ2VTZXJ2ZXJOYW1lOiBzdHJpbmcsXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9sYW5ndWFnZVNlcnZlck5hbWUgPSBsYW5ndWFnZVNlcnZlck5hbWU7XHJcbiAgICB0aGlzLl9zdGFydFNlcnZlciA9IHN0YXJ0U2VydmVyO1xyXG4gICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgdGhpcy5fc3RhcnRGb3JFZGl0b3IgPSBzdGFydEZvckVkaXRvcjtcclxuICAgIHRoaXMudXBkYXRlTm9ybWFsaXplZFByb2plY3RQYXRocygpO1xyXG4gICAgdGhpcy5fY2hhbmdlV2F0Y2hlZEZpbGVGaWx0ZXIgPSBjaGFuZ2VXYXRjaGVkRmlsZUZpbHRlcjtcclxuICAgIHRoaXMuX2dldEJ1c3lTaWduYWxTZXJ2aWNlID0gYnVzeVNpZ25hbFNlcnZpY2VHZXR0ZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhcnRMaXN0ZW5pbmcoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuX2lzU3RhcnRlZCkge1xyXG4gICAgICB0aGlzLl9kaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcclxuICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQoYXRvbS50ZXh0RWRpdG9ycy5vYnNlcnZlKHRoaXMub2JzZXJ2ZVRleHRFZGl0b3JzLmJpbmQodGhpcykpKTtcclxuICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQoYXRvbS5wcm9qZWN0Lm9uRGlkQ2hhbmdlUGF0aHModGhpcy5wcm9qZWN0UGF0aHNDaGFuZ2VkLmJpbmQodGhpcykpKTtcclxuICAgICAgaWYgKGF0b20ucHJvamVjdC5vbkRpZENoYW5nZUZpbGVzKSB7XHJcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQoYXRvbS5wcm9qZWN0Lm9uRGlkQ2hhbmdlRmlsZXModGhpcy5wcm9qZWN0RmlsZXNDaGFuZ2VkLmJpbmQodGhpcykpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0b3BMaXN0ZW5pbmcoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5faXNTdGFydGVkKSB7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLl9pc1N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgb2JzZXJ2ZVRleHRFZGl0b3JzKGVkaXRvcjogVGV4dEVkaXRvcik6IHZvaWQge1xyXG4gICAgLy8gVHJhY2sgZ3JhbW1hciBjaGFuZ2VzIGZvciBvcGVuZWQgZWRpdG9yc1xyXG4gICAgY29uc3QgbGlzdGVuZXIgPSBlZGl0b3Iub2JzZXJ2ZUdyYW1tYXIoKGdyYW1tYXIpID0+IHRoaXMuX2hhbmRsZUdyYW1tYXJDaGFuZ2UoZWRpdG9yKSk7XHJcbiAgICB0aGlzLl9kaXNwb3NhYmxlLmFkZChlZGl0b3Iub25EaWREZXN0cm95KCgpID0+IGxpc3RlbmVyLmRpc3Bvc2UoKSkpO1xyXG4gICAgLy8gVHJ5IHRvIHNlZSBpZiBlZGl0b3IgY2FuIGhhdmUgTFMgY29ubmVjdGVkIHRvIGl0XHJcbiAgICB0aGlzLl9oYW5kbGVUZXh0RWRpdG9yKGVkaXRvcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIF9oYW5kbGVUZXh0RWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgaWYgKCF0aGlzLl9lZGl0b3JUb1NlcnZlci5oYXMoZWRpdG9yKSkge1xyXG4gICAgICAvLyBlZGl0b3IgaGFzbid0IGJlZW4gcHJvY2Vzc2VkIHlldCwgc28gcHJvY2VzcyBpdCBieSBhbGxvY2F0aW5nIExTIGZvciBpdCBpZiBuZWNlc3NhcnlcclxuICAgICAgY29uc3Qgc2VydmVyID0gYXdhaXQgdGhpcy5nZXRTZXJ2ZXIoZWRpdG9yLCB7c2hvdWxkU3RhcnQ6IHRydWV9KTtcclxuICAgICAgaWYgKHNlcnZlciAhPSBudWxsKSB7XHJcbiAgICAgICAgLy8gVGhlcmUgTFMgZm9yIHRoZSBlZGl0b3IgKGVpdGhlciBzdGFydGVkIG5vdyBhbmQgYWxyZWFkeSBydW5uaW5nKVxyXG4gICAgICAgIHRoaXMuX2VkaXRvclRvU2VydmVyLnNldChlZGl0b3IsIHNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQoXHJcbiAgICAgICAgICBlZGl0b3Iub25EaWREZXN0cm95KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fZWRpdG9yVG9TZXJ2ZXIuZGVsZXRlKGVkaXRvcik7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcFVudXNlZFNlcnZlcnMoKTtcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2hhbmRsZUdyYW1tYXJDaGFuZ2UoZWRpdG9yOiBUZXh0RWRpdG9yKSB7XHJcbiAgICBpZiAodGhpcy5fc3RhcnRGb3JFZGl0b3IoZWRpdG9yKSkge1xyXG4gICAgICAvLyBJZiBlZGl0b3IgaXMgaW50ZXJlc3RpbmcgZm9yIExTIHByb2Nlc3MgdGhlIGVkaXRvciBmdXJ0aGVyIHRvIGF0dGVtcHQgdG8gc3RhcnQgTFMgaWYgbmVlZGVkXHJcbiAgICAgIHRoaXMuX2hhbmRsZVRleHRFZGl0b3IoZWRpdG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEVkaXRvciBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBMU1xyXG4gICAgICBjb25zdCBzZXJ2ZXIgPSB0aGlzLl9lZGl0b3JUb1NlcnZlci5nZXQoZWRpdG9yKTtcclxuICAgICAgLy8gSWYgTFMgaXMgcnVubmluZyBmb3IgdGhlIHVuc3VwcG9ydGVkIGVkaXRvciB0aGVuIGRpc2Nvbm5lY3QgdGhlIGVkaXRvciBmcm9tIExTIGFuZCBzaHV0IGRvd24gTFMgaWYgbmVjZXNzYXJ5XHJcbiAgICAgIGlmIChzZXJ2ZXIpIHtcclxuICAgICAgICAvLyBMUyBpcyB1cCBmb3IgdW5zdXBwb3J0ZWQgc2VydmVyXHJcbiAgICAgICAgaWYgKHNlcnZlci5kb2NTeW5jQWRhcHRlcikge1xyXG4gICAgICAgICAgY29uc3Qgc3luY0FkYXB0ZXIgPSBzZXJ2ZXIuZG9jU3luY0FkYXB0ZXIuZ2V0RWRpdG9yU3luY0FkYXB0ZXIoZWRpdG9yKTtcclxuICAgICAgICAgIGlmIChzeW5jQWRhcHRlcikge1xyXG4gICAgICAgICAgICAvLyBJbW1pdGF0ZSBlZGl0b3IgY2xvc2UgdG8gZGlzY29ubmVjdCBMUyBmcm9tIHRoZSBlZGl0b3JcclxuICAgICAgICAgICAgc3luY0FkYXB0ZXIuZGlkQ2xvc2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVtb3ZlIGVkaXRvciBmcm9tIHRoZSBjYWNoZVxyXG4gICAgICAgIHRoaXMuX2VkaXRvclRvU2VydmVyLmRlbGV0ZShlZGl0b3IpO1xyXG4gICAgICAgIC8vIFNodXQgZG93biBMUyBpZiBpdCdzIHVzZWQgYnkgYW55IG90aGVyIGVkaXRvclxyXG4gICAgICAgIHRoaXMuc3RvcFVudXNlZFNlcnZlcnMoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFjdGl2ZVNlcnZlcnMoKTogQWN0aXZlU2VydmVyW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVNlcnZlcnMuc2xpY2UoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBnZXRTZXJ2ZXIoXHJcbiAgICB0ZXh0RWRpdG9yOiBUZXh0RWRpdG9yLFxyXG4gICAge3Nob3VsZFN0YXJ0fToge3Nob3VsZFN0YXJ0PzogYm9vbGVhbn0gPSB7c2hvdWxkU3RhcnQ6IGZhbHNlfSxcclxuICApOiBQcm9taXNlPEFjdGl2ZVNlcnZlciB8IG51bGw+IHtcclxuICAgIGNvbnN0IGZpbmFsUHJvamVjdFBhdGggPSB0aGlzLmRldGVybWluZVByb2plY3RQYXRoKHRleHRFZGl0b3IpO1xyXG4gICAgaWYgKGZpbmFsUHJvamVjdFBhdGggPT0gbnVsbCkge1xyXG4gICAgICAvLyBGaWxlcyBub3QgeWV0IHNhdmVkIGhhdmUgbm8gcGF0aFxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmb3VuZEFjdGl2ZVNlcnZlciA9IHRoaXMuX2FjdGl2ZVNlcnZlcnMuZmluZCgocykgPT4gZmluYWxQcm9qZWN0UGF0aCA9PT0gcy5wcm9qZWN0UGF0aCk7XHJcbiAgICBpZiAoZm91bmRBY3RpdmVTZXJ2ZXIpIHtcclxuICAgICAgcmV0dXJuIGZvdW5kQWN0aXZlU2VydmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0YXJ0aW5nUHJvbWlzZSA9IHRoaXMuX3N0YXJ0aW5nU2VydmVyUHJvbWlzZXMuZ2V0KGZpbmFsUHJvamVjdFBhdGgpO1xyXG4gICAgaWYgKHN0YXJ0aW5nUHJvbWlzZSkge1xyXG4gICAgICByZXR1cm4gc3RhcnRpbmdQcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaG91bGRTdGFydCAmJiB0aGlzLl9zdGFydEZvckVkaXRvcih0ZXh0RWRpdG9yKSA/IGF3YWl0IHRoaXMuc3RhcnRTZXJ2ZXIoZmluYWxQcm9qZWN0UGF0aCkgOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIHN0YXJ0U2VydmVyKHByb2plY3RQYXRoOiBzdHJpbmcpOiBQcm9taXNlPEFjdGl2ZVNlcnZlcj4ge1xyXG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKGBTZXJ2ZXIgc3RhcnRpbmcgXCIke3Byb2plY3RQYXRofVwiYCk7XHJcbiAgICBjb25zdCBzdGFydGluZ1Byb21pc2UgPSB0aGlzLl9zdGFydFNlcnZlcihwcm9qZWN0UGF0aCk7XHJcbiAgICB0aGlzLl9zdGFydGluZ1NlcnZlclByb21pc2VzLnNldChwcm9qZWN0UGF0aCwgc3RhcnRpbmdQcm9taXNlKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0YXJ0ZWRBY3RpdmVTZXJ2ZXIgPSBhd2FpdCBzdGFydGluZ1Byb21pc2U7XHJcbiAgICAgIHRoaXMuX2FjdGl2ZVNlcnZlcnMucHVzaChzdGFydGVkQWN0aXZlU2VydmVyKTtcclxuICAgICAgdGhpcy5fc3RhcnRpbmdTZXJ2ZXJQcm9taXNlcy5kZWxldGUocHJvamVjdFBhdGgpO1xyXG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYFNlcnZlciBzdGFydGVkIFwiJHtwcm9qZWN0UGF0aH1cIiAocGlkICR7c3RhcnRlZEFjdGl2ZVNlcnZlci5wcm9jZXNzLnBpZH0pYCk7XHJcbiAgICAgIHJldHVybiBzdGFydGVkQWN0aXZlU2VydmVyO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aGlzLl9zdGFydGluZ1NlcnZlclByb21pc2VzLmRlbGV0ZShwcm9qZWN0UGF0aCk7XHJcbiAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgc3RvcFVudXNlZFNlcnZlcnMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCB1c2VkU2VydmVycyA9IG5ldyBTZXQodGhpcy5fZWRpdG9yVG9TZXJ2ZXIudmFsdWVzKCkpO1xyXG4gICAgY29uc3QgdW51c2VkU2VydmVycyA9IHRoaXMuX2FjdGl2ZVNlcnZlcnMuZmlsdGVyKChzKSA9PiAhdXNlZFNlcnZlcnMuaGFzKHMpKTtcclxuICAgIGlmICh1bnVzZWRTZXJ2ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKGBTdG9wcGluZyAke3VudXNlZFNlcnZlcnMubGVuZ3RofSB1bnVzZWQgc2VydmVyc2ApO1xyXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbCh1bnVzZWRTZXJ2ZXJzLm1hcCgocykgPT4gdGhpcy5zdG9wU2VydmVyKHMpKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgc3RvcEFsbFNlcnZlcnMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBmb3IgKGNvbnN0IFtwcm9qZWN0UGF0aCwgcmVzdGFydENvdW50ZXJdIG9mIHRoaXMuX3Jlc3RhcnRDb3VudGVyUGVyUHJvamVjdCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQocmVzdGFydENvdW50ZXIudGltZXJJZCk7XHJcbiAgICAgIHRoaXMuX3Jlc3RhcnRDb3VudGVyUGVyUHJvamVjdC5kZWxldGUocHJvamVjdFBhdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IFByb21pc2UuYWxsKHRoaXMuX2FjdGl2ZVNlcnZlcnMubWFwKChzKSA9PiB0aGlzLnN0b3BTZXJ2ZXIocykpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyByZXN0YXJ0QWxsU2VydmVycygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRoaXMuc3RvcExpc3RlbmluZygpO1xyXG4gICAgYXdhaXQgdGhpcy5zdG9wQWxsU2VydmVycygpO1xyXG4gICAgdGhpcy5fZWRpdG9yVG9TZXJ2ZXIgPSBuZXcgTWFwKCk7XHJcbiAgICB0aGlzLnN0YXJ0TGlzdGVuaW5nKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFzU2VydmVyUmVhY2hlZFJlc3RhcnRMaW1pdChzZXJ2ZXI6IEFjdGl2ZVNlcnZlcikge1xyXG4gICAgbGV0IHJlc3RhcnRDb3VudGVyID0gdGhpcy5fcmVzdGFydENvdW50ZXJQZXJQcm9qZWN0LmdldChzZXJ2ZXIucHJvamVjdFBhdGgpO1xyXG5cclxuICAgIGlmICghcmVzdGFydENvdW50ZXIpIHtcclxuICAgICAgcmVzdGFydENvdW50ZXIgPSB7XHJcbiAgICAgICAgcmVzdGFydHM6IDAsXHJcbiAgICAgICAgdGltZXJJZDogc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLl9yZXN0YXJ0Q291bnRlclBlclByb2plY3QuZGVsZXRlKHNlcnZlci5wcm9qZWN0UGF0aCk7XHJcbiAgICAgICAgfSwgMyAqIDYwICogMTAwMCAvKiAzIG1pbnV0ZXMgKi8pLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5fcmVzdGFydENvdW50ZXJQZXJQcm9qZWN0LnNldChzZXJ2ZXIucHJvamVjdFBhdGgsIHJlc3RhcnRDb3VudGVyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKytyZXN0YXJ0Q291bnRlci5yZXN0YXJ0cyA+IDU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgc3RvcFNlcnZlcihzZXJ2ZXI6IEFjdGl2ZVNlcnZlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgYnVzeVNpZ25hbFNlcnZpY2UgPSB0aGlzLl9nZXRCdXN5U2lnbmFsU2VydmljZSgpO1xyXG4gICAgY29uc3Qgc2lnbmFsID0gYnVzeVNpZ25hbFNlcnZpY2UgJiYgYnVzeVNpZ25hbFNlcnZpY2UucmVwb3J0QnVzeShcclxuICAgICAgYFN0b3BwaW5nICR7dGhpcy5fbGFuZ3VhZ2VTZXJ2ZXJOYW1lfSBmb3IgJHtwYXRoLmJhc2VuYW1lKHNlcnZlci5wcm9qZWN0UGF0aCl9YCxcclxuICAgICk7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYFNlcnZlciBzdG9wcGluZyBcIiR7c2VydmVyLnByb2plY3RQYXRofVwiYCk7XHJcbiAgICAgIC8vIEltbWVkaWF0ZWx5IHJlbW92ZSB0aGUgc2VydmVyIHRvIHByZXZlbnQgZnVydGhlciB1c2FnZS5cclxuICAgICAgLy8gSWYgd2UgcmUtb3BlbiB0aGUgZmlsZSBhZnRlciB0aGlzIHBvaW50LCB3ZSdsbCBnZXQgYSBuZXcgc2VydmVyLlxyXG4gICAgICB0aGlzLl9hY3RpdmVTZXJ2ZXJzLnNwbGljZSh0aGlzLl9hY3RpdmVTZXJ2ZXJzLmluZGV4T2Yoc2VydmVyKSwgMSk7XHJcbiAgICAgIHRoaXMuX3N0b3BwaW5nU2VydmVycy5wdXNoKHNlcnZlcik7XHJcbiAgICAgIHNlcnZlci5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcclxuICAgICAgaWYgKHNlcnZlci5jb25uZWN0aW9uLmlzQ29ubmVjdGVkKSB7XHJcbiAgICAgICAgYXdhaXQgc2VydmVyLmNvbm5lY3Rpb24uc2h1dGRvd24oKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChjb25zdCBbZWRpdG9yLCBtYXBwZWRTZXJ2ZXJdIG9mIHRoaXMuX2VkaXRvclRvU2VydmVyKSB7XHJcbiAgICAgICAgaWYgKG1hcHBlZFNlcnZlciA9PT0gc2VydmVyKSB7XHJcbiAgICAgICAgICB0aGlzLl9lZGl0b3JUb1NlcnZlci5kZWxldGUoZWRpdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuZXhpdFNlcnZlcihzZXJ2ZXIpO1xyXG4gICAgICB0aGlzLl9zdG9wcGluZ1NlcnZlcnMuc3BsaWNlKHRoaXMuX3N0b3BwaW5nU2VydmVycy5pbmRleE9mKHNlcnZlciksIDEpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2lnbmFsICYmIHNpZ25hbC5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZXhpdFNlcnZlcihzZXJ2ZXI6IEFjdGl2ZVNlcnZlcik6IHZvaWQge1xyXG4gICAgY29uc3QgcGlkID0gc2VydmVyLnByb2Nlc3MucGlkO1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHNlcnZlci5jb25uZWN0aW9uLmlzQ29ubmVjdGVkKSB7XHJcbiAgICAgICAgc2VydmVyLmNvbm5lY3Rpb24uZXhpdCgpO1xyXG4gICAgICAgIHNlcnZlci5jb25uZWN0aW9uLmRpc3Bvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2VydmVyLnByb2Nlc3Mua2lsbCgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKGBTZXJ2ZXIgc3RvcHBlZCBcIiR7c2VydmVyLnByb2plY3RQYXRofVwiIChwaWQgJHtwaWR9KWApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRlcm1pbmF0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX3N0b3BwaW5nU2VydmVycy5mb3JFYWNoKChzZXJ2ZXIpID0+IHtcclxuICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKGBTZXJ2ZXIgdGVybWluYXRpbmcgXCIke3NlcnZlci5wcm9qZWN0UGF0aH1cImApO1xyXG4gICAgICB0aGlzLmV4aXRTZXJ2ZXIoc2VydmVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRldGVybWluZVByb2plY3RQYXRoKHRleHRFZGl0b3I6IFRleHRFZGl0b3IpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIGNvbnN0IGZpbGVQYXRoID0gdGV4dEVkaXRvci5nZXRQYXRoKCk7XHJcbiAgICBpZiAoZmlsZVBhdGggPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9ub3JtYWxpemVkUHJvamVjdFBhdGhzLmZpbmQoKGQpID0+IGZpbGVQYXRoLnN0YXJ0c1dpdGgoZCkpIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlTm9ybWFsaXplZFByb2plY3RQYXRocygpOiB2b2lkIHtcclxuICAgIHRoaXMuX25vcm1hbGl6ZWRQcm9qZWN0UGF0aHMgPSBhdG9tLnByb2plY3QuZ2V0RGlyZWN0b3JpZXMoKS5tYXAoKGQpID0+IHRoaXMubm9ybWFsaXplUGF0aChkLmdldFBhdGgoKSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG5vcm1hbGl6ZVBhdGgocHJvamVjdFBhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gIXByb2plY3RQYXRoLmVuZHNXaXRoKHBhdGguc2VwKSA/IHBhdGguam9pbihwcm9qZWN0UGF0aCwgcGF0aC5zZXApIDogcHJvamVjdFBhdGg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcHJvamVjdFBhdGhzQ2hhbmdlZChwcm9qZWN0UGF0aHM6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICBjb25zdCBwYXRoc1NldCA9IG5ldyBTZXQocHJvamVjdFBhdGhzLm1hcCh0aGlzLm5vcm1hbGl6ZVBhdGgpKTtcclxuICAgIGNvbnN0IHNlcnZlcnNUb1N0b3AgPSB0aGlzLl9hY3RpdmVTZXJ2ZXJzLmZpbHRlcigocykgPT4gIXBhdGhzU2V0LmhhcyhzLnByb2plY3RQYXRoKSk7XHJcbiAgICBQcm9taXNlLmFsbChzZXJ2ZXJzVG9TdG9wLm1hcCgocykgPT4gdGhpcy5zdG9wU2VydmVyKHMpKSk7XHJcbiAgICB0aGlzLnVwZGF0ZU5vcm1hbGl6ZWRQcm9qZWN0UGF0aHMoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwcm9qZWN0RmlsZXNDaGFuZ2VkKGZpbGVFdmVudHM6IFByb2plY3RGaWxlRXZlbnRbXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2FjdGl2ZVNlcnZlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IGFjdGl2ZVNlcnZlciBvZiB0aGlzLl9hY3RpdmVTZXJ2ZXJzKSB7XHJcbiAgICAgIGNvbnN0IGNoYW5nZXM6IGxzLkZpbGVFdmVudFtdID0gW107XHJcbiAgICAgIGZvciAoY29uc3QgZmlsZUV2ZW50IG9mIGZpbGVFdmVudHMpIHtcclxuICAgICAgICBpZiAoZmlsZUV2ZW50LnBhdGguc3RhcnRzV2l0aChhY3RpdmVTZXJ2ZXIucHJvamVjdFBhdGgpICYmIHRoaXMuX2NoYW5nZVdhdGNoZWRGaWxlRmlsdGVyKGZpbGVFdmVudC5wYXRoKSkge1xyXG4gICAgICAgICAgY2hhbmdlcy5wdXNoKENvbnZlcnQuYXRvbUZpbGVFdmVudFRvTFNGaWxlRXZlbnRzKGZpbGVFdmVudClbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBmaWxlRXZlbnQub2xkUGF0aCAmJlxyXG4gICAgICAgICAgZmlsZUV2ZW50Lm9sZFBhdGguc3RhcnRzV2l0aChhY3RpdmVTZXJ2ZXIucHJvamVjdFBhdGgpICYmXHJcbiAgICAgICAgICB0aGlzLl9jaGFuZ2VXYXRjaGVkRmlsZUZpbHRlcihmaWxlRXZlbnQub2xkUGF0aClcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNoYW5nZXMucHVzaChDb252ZXJ0LmF0b21GaWxlRXZlbnRUb0xTRmlsZUV2ZW50cyhmaWxlRXZlbnQpWzFdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNoYW5nZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGFjdGl2ZVNlcnZlci5jb25uZWN0aW9uLmRpZENoYW5nZVdhdGNoZWRGaWxlcyh7Y2hhbmdlc30pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==