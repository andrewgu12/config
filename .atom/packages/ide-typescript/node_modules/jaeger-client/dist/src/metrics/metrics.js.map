{"version":3,"sources":["../../../src/metrics/metrics.js"],"names":["Metrics","factory","_factory","tracesStartedSampled","createCounter","state","sampled","tracesStartedNotSampled","tracesJoinedSampled","tracesJoinedNotSampled","spansStarted","group","spansFinished","spansSampled","spansNotSampled","decodingErrors","reporterSuccess","reporterFailure","reporterDropped","reporterQueueLength","createGauge","samplerRetrieved","samplerUpdated","samplerQueryFailure","phase","samplerParsingFailure","baggageUpdateSuccess","result","baggageUpdateFailure","baggageTruncate"],"mappings":"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","file":"metrics.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nexport default class Metrics {\n  _factory: MetricsFactory;\n  tracesStartedSampled: Counter;\n  tracesStartedNotSampled: Counter;\n  tracesJoinedSampled: Counter;\n  tracesJoinedNotSampled: Counter;\n  spansStarted: Counter;\n  spansFinished: Counter;\n  spansSampled: Counter;\n  spansNotSampled: Counter;\n  decodingErrors: Counter;\n  reporterSuccess: Counter;\n  reporterFailure: Counter;\n  reporterDropped: Counter;\n  reporterQueueLength: Gauge;\n  samplerRetrieved: Counter;\n  samplerUpdated: Counter;\n  samplerQueryFailure: Counter;\n  samplerParsingFailure: Counter;\n  baggageUpdateSuccess: Counter;\n  baggageUpdateFailure: Counter;\n  baggageTruncate: Counter;\n\n  constructor(factory: MetricsFactory) {\n    this._factory = factory;\n\n    this.tracesStartedSampled = this._factory.createCounter('traces', {\n      state: 'started',\n      sampled: 'y',\n    });\n\n    this.tracesStartedNotSampled = this._factory.createCounter('traces', {\n      state: 'started',\n      sampled: 'n',\n    });\n\n    this.tracesJoinedSampled = this._factory.createCounter('traces', {\n      state: 'joined',\n      sampled: 'y',\n    });\n\n    this.tracesJoinedNotSampled = this._factory.createCounter('traces', {\n      state: 'joined',\n      sampled: 'n',\n    });\n\n    this.spansStarted = this._factory.createCounter('spans', {\n      group: 'lifecycle',\n      state: 'started',\n    });\n\n    this.spansFinished = this._factory.createCounter('spans', {\n      group: 'lifecycle',\n      state: 'finished',\n    });\n\n    this.spansSampled = this._factory.createCounter('spans', {\n      group: 'sampling',\n      sampled: 'y',\n    });\n\n    this.spansNotSampled = this._factory.createCounter('spans', {\n      group: 'sampling',\n      sampled: 'n',\n    });\n\n    this.decodingErrors = this._factory.createCounter('decoding-errors');\n\n    this.reporterSuccess = this._factory.createCounter('reporter-spans', {\n      state: 'success',\n    });\n\n    this.reporterFailure = this._factory.createCounter('reporter-spans', {\n      state: 'failure',\n    });\n\n    this.reporterDropped = this._factory.createCounter('reporter-spans', {\n      state: 'dropped',\n    });\n\n    this.reporterQueueLength = this._factory.createGauge('reporter-queue');\n\n    this.samplerRetrieved = this._factory.createCounter('sampler', {\n      state: 'retrieved',\n    });\n\n    this.samplerUpdated = this._factory.createCounter('sampler', {\n      state: 'updated',\n    });\n\n    this.samplerQueryFailure = this._factory.createCounter('sampler', {\n      state: 'failure',\n      phase: 'query',\n    });\n\n    this.samplerParsingFailure = this._factory.createCounter('sampler', {\n      state: 'failure',\n      phase: 'parsing',\n    });\n\n    this.baggageUpdateSuccess = this._factory.createCounter('baggage-update', {\n      result: 'ok',\n    });\n\n    this.baggageUpdateFailure = this._factory.createCounter('baggage-update', {\n      result: 'err',\n    });\n\n    this.baggageTruncate = this._factory.createCounter('baggage-trucate');\n  }\n}\n"]}