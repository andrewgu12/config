{"version":3,"sources":["../../src/configuration.js"],"names":["constants","jaegerSchema","id","type","properties","serviceName","disable","sampler","param","host","port","refreshIntervalMs","required","additionalProperties","reporter","logSpans","agentHost","agentPort","flushIntervalMs","Configuration","config","Error","SAMPLER_TYPE_PROBABILISTIC","SAMPLER_TYPE_RATE_LIMITING","SAMPLER_TYPE_CONST","SAMPLER_TYPE_REMOTE","refreshInterval","options","reporterConfig","reporters","senderConfig","logger","push","sender","remoteReporter","length","metrics","Tracer","_getSampler","_getReporter","info","name","tags"],"mappings":"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","file":"configuration.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport ConstSampler from './samplers/const_sampler';\nimport ProbabilisticSampler from './samplers/probabilistic_sampler';\nimport RateLimitingSampler from './samplers/ratelimiting_sampler';\nimport RemoteReporter from './reporters/remote_reporter';\nimport CompositeReporter from './reporters/composite_reporter';\nimport LoggingReporter from './reporters/logging_reporter';\nimport RemoteSampler from './samplers/remote_sampler';\nimport Metrics from './metrics/metrics';\nimport Tracer from './tracer';\nimport UDPSender from './reporters/udp_sender';\nimport opentracing from 'opentracing';\nimport * as constants from './constants.js';\n\nlet jaegerSchema = {\n  id: '/jaeger',\n  type: 'object',\n  properties: {\n    serviceName: { type: 'string' },\n    disable: { type: 'boolean' },\n    sampler: {\n      properties: {\n        type: { type: 'string' },\n        param: { type: 'number' },\n        host: { type: 'string' },\n        port: { type: 'number' },\n        refreshIntervalMs: { type: 'number' },\n      },\n      required: ['type', 'param'],\n      additionalProperties: false,\n    },\n    reporter: {\n      properties: {\n        logSpans: { type: 'boolean' },\n        agentHost: { type: 'string' },\n        agentPort: { type: 'number' },\n        flushIntervalMs: { type: 'number' },\n      },\n      additionalProperties: false,\n    },\n  },\n};\n\nexport default class Configuration {\n  static _getSampler(config) {\n    let type = config.sampler.type;\n    let param = config.sampler.param;\n    let host = config.sampler.host;\n    let port = config.sampler.port;\n    let refreshIntervalMs = config.sampler.refreshIntervalMs;\n\n    if (typeof param !== 'number') {\n      throw new Error(`Expecting sampler.param to be a number. Received ${param}`);\n    }\n\n    let sampler;\n    if (type === constants.SAMPLER_TYPE_PROBABILISTIC) {\n      sampler = new ProbabilisticSampler(param);\n    }\n\n    if (type === constants.SAMPLER_TYPE_RATE_LIMITING) {\n      sampler = new RateLimitingSampler(param);\n    }\n\n    if (type === constants.SAMPLER_TYPE_CONST) {\n      sampler = new ConstSampler(param === 1);\n    }\n\n    if (type === constants.SAMPLER_TYPE_REMOTE) {\n      sampler = new RemoteSampler(config.serviceName, {\n        sampler: new ProbabilisticSampler(param),\n        host: host,\n        port: port,\n        refreshInterval: refreshIntervalMs,\n      });\n    }\n\n    return sampler;\n  }\n\n  static _getReporter(config, options) {\n    let reporterConfig = {};\n    let reporters = [];\n    let senderConfig = {\n      logger: config.logger,\n    };\n    if (config.reporter) {\n      if (config.reporter.logSpans) {\n        reporters.push(new LoggingReporter(options.logger));\n      }\n\n      if (config.reporter.flushIntervalMs) {\n        reporterConfig['bufferFlushInterval'] = config.reporter.flushIntervalMs;\n      }\n\n      if (config.reporter.agentHost) {\n        senderConfig['host'] = config.reporter.agentHost;\n      }\n\n      if (config.reporter.agentPort) {\n        senderConfig['port'] = config.reporter.agentPort;\n      }\n    }\n    let sender = new UDPSender(senderConfig);\n    let remoteReporter = new RemoteReporter(sender, reporterConfig);\n    if (reporters.length == 0) {\n      return remoteReporter;\n    }\n    reporters.push(remoteReporter);\n    return new CompositeReporter(reporters);\n  }\n\n  /**\n   * Initialize and return a new instance of Jaeger Tracer.\n   *\n   * The config dictionary is not validated for adherence to the schema above.\n   * Such validation can be performed like this:\n   *\n   *     import {Validator} from 'jsonschema';\n   *\n   *     let v = new Validator();\n   *     v.validate(config, jaegerSchema, {\n   *       throwError: true\n   *     });\n   *\n   * @param {Object} config - configuration matching the jaegerSchema definition.\n   * @param {Object} options - options\n   * @param {Object} [options.reporter] - if provided, this reporter will be used.\n   *        Otherwise a new reporter will be created according to the description\n   *        in the config.\n   * @param {Object} [options.metrics] - a metrics factory (see ./_flow/metrics.js)\n   * @param {Object} [options.logger] - a logger (see ./_flow/logger.js)\n   * @param {Object} [options.tags] - set of key-value pairs which will be set\n   *        as process-level tags on the Tracer itself.\n   */\n  static initTracer(config, options = {}) {\n    let reporter;\n    let sampler;\n    if (options.metrics) {\n      options.metrics = new Metrics(options.metrics);\n    }\n    if (config.disable) {\n      return new opentracing.Tracer();\n    }\n    if (!config.serviceName) {\n      throw new Error(`config.serviceName must be provided`);\n    }\n    if (config.sampler) {\n      sampler = Configuration._getSampler(config);\n    } else {\n      sampler = new RemoteSampler(config.serviceName, options);\n    }\n    if (!options.reporter) {\n      reporter = Configuration._getReporter(config, options);\n    } else {\n      reporter = options.reporter;\n    }\n\n    if (options.logger) {\n      options.logger.info(`Initializing Jaeger Tracer with ${reporter.name()} and ${sampler.name()}`);\n    }\n\n    return new Tracer(config.serviceName, reporter, sampler, {\n      metrics: options.metrics,\n      logger: options.logger,\n      tags: options.tags,\n    });\n  }\n}\n"]}