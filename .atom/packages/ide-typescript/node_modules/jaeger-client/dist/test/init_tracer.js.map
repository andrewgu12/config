{"version":3,"sources":["../../test/init_tracer.js"],"names":["describe","it","config","serviceName","disable","tracer","to","be","an","instanceof","Tracer","configs","each","throw","_sampler","_reporter","options","type","param","expectedType","expectedParam","samplerConfig","sampler","count","err","equal","reporter","logSpans","agentHost","agentPort","flushIntervalMs","remoteReporter","i","_reporters","length","_bufferFlushInterval","_sender","_host","_port","logger","info","msg","metrics","createCounter","createGauge","createTimer","tags","x","_logger","_metrics","_factory","_tags"],"mappings":"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","file":"init_tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport NoopReporter from '../src/reporters/noop_reporter';\nimport CompositeReporter from '../src/reporters/composite_reporter';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport RemoteSampler from '../src/samplers/remote_sampler';\nimport RateLimitingSampler from '../src/samplers/ratelimiting_sampler';\nimport { initTracer } from '../src/index.js';\nimport opentracing from 'opentracing';\n\ndescribe('initTracer', () => {\n  it('should initialize noop tracer when disable is set', () => {\n    let config = {\n      serviceName: 'test-service',\n      disable: true,\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n  });\n\n  it('should throw error on invalid serviceName', () => {\n    let configs = [{ serviceName: '' }, { serviceName: null }, {}];\n\n    _.each(configs, config => {\n      expect(() => {\n        initTracer(config);\n      }).to.throw('config.serviceName must be provided');\n    });\n  });\n\n  it('should initialize normal tracer when only service name given', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n  });\n\n  it('should initialize proper samplers', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 1, expectedType: ConstSampler, expectedParam: 1 },\n      { type: 'ratelimiting', param: 2, expectedType: RateLimitingSampler, expectedParam: 2 },\n      { type: 'probabilistic', param: 0.5, expectedType: ProbabilisticSampler, expectedParam: 0.5 },\n      { type: 'remote', param: 1, expectedType: RemoteSampler, expectedParam: 1 },\n    ];\n\n    _.each(options, samplerConfig => {\n      let expectedType = samplerConfig.expectedType;\n      let expectedParam = samplerConfig.expectedParam;\n      delete samplerConfig.expectedType;\n      delete samplerConfig.expectedParam;\n\n      config.sampler = samplerConfig;\n      let tracer = initTracer(config);\n\n      expect(tracer._sampler).to.be.an.instanceof(expectedType);\n      // TODO(oibe:head) test utils for expectedParam here?\n    });\n  });\n\n  it('should throw error on sampler incorrect type', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 'bad-value' },\n      { type: 'ratelimiting', param: 'bad-value' },\n      { type: 'probabilistic', param: 'bad-value' },\n      { type: 'remote', param: 'bad-value' },\n    ];\n\n    let count = 0;\n    _.each(options, samplerConfig => {\n      config.sampler = samplerConfig;\n\n      // Since its an error from a third party framework, its hard to assert on\n      // using expect.\n      try {\n        initTracer(config);\n      } catch (err) {\n        count += 1;\n      }\n    });\n\n    assert.equal(count, 4);\n  });\n\n  it('should respect reporter options', () => {\n    let config = {\n      serviceName: 'test-service',\n      sampler: {\n        type: 'const',\n        param: 0,\n      },\n      reporter: {\n        logSpans: true,\n        agentHost: '127.0.0.1',\n        agentPort: 4939,\n        flushIntervalMs: 2000,\n      },\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n    let remoteReporter;\n    for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n      let reporter = tracer._reporter._reporters[i];\n      if (reporter instanceof RemoteReporter) {\n        remoteReporter = reporter;\n        break;\n      }\n    }\n\n    assert.equal(remoteReporter._bufferFlushInterval, 2000);\n    assert.equal(remoteReporter._sender._host, '127.0.0.1');\n    assert.equal(remoteReporter._sender._port, 4939);\n  });\n\n  it('should pass options to tracer', () => {\n    let logger = {\n      info: function info(msg) {},\n    };\n    let metrics = {\n      createCounter: function createCounter() {\n        return {};\n      },\n      createGauge: function createGauge() {\n        return {};\n      },\n      createTimer: function createTimer() {\n        return {};\n      },\n    };\n    let tracer = initTracer(\n      {\n        serviceName: 'test-service',\n      },\n      {\n        logger: logger,\n        metrics: metrics,\n        tags: {\n          x: 'y',\n        },\n      }\n    );\n    assert.equal(tracer._logger, logger);\n    assert.equal(tracer._metrics._factory, metrics);\n    assert.equal(tracer._tags['x'], 'y');\n  });\n});\n"]}