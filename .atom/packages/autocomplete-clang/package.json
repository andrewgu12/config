{
  "_args": [
    [
      {
        "raw": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/d-117330-1470-isttzg/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/d-117330-1470-isttzg/package.tgz",
        "spec": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/d-117330-1470-isttzg/package.tgz",
        "type": "local"
      },
      "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/apm-install-dir-117330-1470-oooxa2"
    ]
  ],
  "_from": "../d-117330-1470-isttzg/package.tgz",
  "_id": "autocomplete-clang@0.11.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/autocomplete-clang",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/d-117330-1470-isttzg/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/d-117330-1470-isttzg/package.tgz",
    "spec": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/d-117330-1470-isttzg/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-117330-1470-isttzg/package.tgz",
  "_shasum": "0ae8770da215ebbd69f02a34eface38f397eeee5",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/d-117330-1470-isttzg/package.tgz",
  "_where": "/private/var/folders/c_/ddmfp_p50c1c2h1c5dxg58nr0000gn/T/apm-install-dir-117330-1470-oooxa2",
  "activationCommands": [],
  "bugs": {
    "url": "https://github.com/yasuyuky/autocomplete-clang/issues"
  },
  "dependencies": {
    "atom-space-pen-views": "^2.2.0",
    "clang-flags": "0.2.2",
    "tmp": "0.0.31"
  },
  "description": "autocomplete for C/C++/ObjC using clang",
  "devDependencies": {},
  "engines": {
    "atom": "^1.0.0"
  },
  "homepage": "https://github.com/yasuyuky/autocomplete-clang#readme",
  "license": "MIT",
  "main": "./lib/autocomplete-clang",
  "name": "autocomplete-clang",
  "optionalDependencies": {},
  "providedServices": {
    "autocomplete.provider": {
      "versions": {
        "2.0.0": "provide"
      }
    }
  },
  "readme": "# autocomplete-clang package\n\nThis package provides completions by [clang](http://clang.llvm.org/)\nlike [emacs auto-complete-clang.el](https://github.com/brianjcj/auto-complete-clang).\n\nusing [autocomplete-plus](https://atom.io/packages/autocomplete-plus)\n\n[![Build Status](https://circleci.com/gh/yasuyuky/autocomplete-clang.svg)](https://circleci.com/gh/yasuyuky/autocomplete-clang)\n\n**for `C`/`C++`/`Objective-C`**\n\n![Screenshot for how autocomplete works](https://raw.githubusercontent.com/yasuyuky/autocomplete-clang/DocumentImage/images/autocomplete-clang.gif)\n\nThis package is currently in an experimental state.\n\n## Requirement\n\n- [autocomplete-plus](https://atom.io/packages/autocomplete-plus)\n- **[clang](http://clang.llvm.org/)**\n\n\n## Features\n\n- Providing completions by clang\n- Auto toggle\n  - default keys `[\".\",\"#\",\"::\",\"->\"]`\n- Using `std` option like `c++11`\n- Using precompile headers for clang\n- Goto symbol definition in a source file\n\n## Using precompiled headers\n\nIt can use precompiled headers for clang. *Optional*\n\nCommand for emitting precompiled header is easily access from menu.\n\n### Emitting pch(precompiled header file),\n\n1. Open `C`/`C++`/`Objective-C` source file on editor buffer.\n2. Choose `Packages` -> `Autocomplete Clang` -> `Emit Precompiled Header`\n3. Then package automatically detect emitted pch file.\n\n![Screenshot of emit-pch](https://raw.githubusercontent.com/yasuyuky/autocomplete-clang/DocumentImage/images/autocomplete-clang-emit-pch.png)\n\n### Notice\n\nIf you change the `std` option after you emitted the pch, you should emit pch again.\n\n## Settings\n\n### Global\n\n![Screenshot of configuration](https://raw.githubusercontent.com/yasuyuky/autocomplete-clang/DocumentImage/images/autocomplete-clang-settings.png)\n\n### Project\n\nautocomplete-clang will look for a .clang_complete file as used by vim's [clang_complete](https://github.com/Rip-Rip/clang_complete) plugin, by searching up the directory tree. If it finds one, it'll use this to add parameters passed to clang. Use this for adding project-specific defines or include paths. The format is simply one parameter per line, e.g.\n```\n  -I/opt/qt/5.3/clang_64/lib/QtWebKitWidgets.framework/Versions/5/Headers\n  -I/opt/qt/5.3/clang_64/lib/QtMultimedia.framework/Versions/5/Headers\n  -DSWIFT_EXPERIMENTAL_FT\n```\n\n## Keymaps\n\n### Default keymaps\n\nAlso you can customize keymaps by editing ~/.atom/keymap.cson\n(choose Open Your Keymap in Atom menu):\n\n```cson\n'.workspace':\n  'cmd-ctrl-alt-e': 'autocomplete-clang:emit-pch'\n  'f3': 'autocomplete-clang:go-declaration'\n```\n\nSee [basic customization](http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings) for more details.\n\n## License\n\nMIT (See License file)\n\n## Update problems\n\n    Error message: Module version mismatch.\n\nIf you got a such kind of errors after AtomEditor update, Try following commands.\n\n    cd ~/.atom/package/autocomplete-clang/\n    rm -rf node_modules && apm install\n\n## Misc\n\n- Motivation of the original author is `C++`,\n  So that tests for `C`/`Objective-C` may be not enough.\n\n- Any casual feedbacks to [@yasuyuky](https://twitter.com/yasuyuky) are welcome.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yasuyuky/autocomplete-clang.git"
  },
  "version": "0.11.3"
}
