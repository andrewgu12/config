"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var GalleryInterfaces_1 = require("vso-node-api/interfaces/GalleryInterfaces");
var viewutils_1 = require("./viewutils");
var limitVersions = 6;
function show(extensionId, json) {
    if (json === void 0) { json = false; }
    var flags = [
        GalleryInterfaces_1.ExtensionQueryFlags.IncludeCategoryAndTags,
        GalleryInterfaces_1.ExtensionQueryFlags.IncludeMetadata,
        GalleryInterfaces_1.ExtensionQueryFlags.IncludeStatistics,
        GalleryInterfaces_1.ExtensionQueryFlags.IncludeVersions,
    ];
    return util_1.getPublicGalleryAPI()
        .getExtension(extensionId, flags)
        .then(function (extension) {
        if (json) {
            console.log(JSON.stringify(extension, undefined, '\t'));
        }
        else {
            if (extension === undefined) {
                console.log("Error: Extension \"" + extensionId + "\" not found.");
            }
            else {
                showOverview(extension);
            }
        }
    });
}
exports.show = show;
function showOverview(_a) {
    var displayName = _a.displayName, extensionName = _a.extensionName, shortDescription = _a.shortDescription, versions = _a.versions, _b = _a.publisher, publisherDisplayName = _b.displayName, publisherName = _b.publisherName, categories = _a.categories, tags = _a.tags, statistics = _a.statistics, publishedDate = _a.publishedDate, lastUpdated = _a.lastUpdated;
    var _c = versions[0], _d = (_c === void 0 ? {} : _c).version, version = _d === void 0 ? 'unknown' : _d;
    // tags may not be in manifest
    if (!tags) {
        tags = [];
    }
    // Create formatted table list of versions
    var versionList = versions
        .slice(0, limitVersions)
        .map(function (_a) {
        var version = _a.version, lastUpdated = _a.lastUpdated;
        return [version, viewutils_1.formatDate(lastUpdated)];
    });
    var _e = statistics
        .reduce(function (map, _a) {
        var statisticName = _a.statisticName, value = _a.value;
        return (__assign({}, map, (_b = {}, _b[statisticName] = value, _b)));
        var _b;
    }, {}), _f = _e.install, installs = _f === void 0 ? 0 : _f, _g = _e.averagerating, averagerating = _g === void 0 ? 0 : _g, _h = _e.ratingcount, ratingcount = _h === void 0 ? 0 : _h;
    // Render
    console.log([
        "" + displayName,
        publisherDisplayName + " | " + '\u2913' +
            (Number(installs).toLocaleString() + " installs |") +
            (" " + viewutils_1.ratingStars(averagerating) + " (" + ratingcount + ")"),
        '',
        "" + shortDescription,
        '',
        'Recent versions:'
    ].concat((versionList.length ? viewutils_1.tableView(versionList).map(viewutils_1.indentRow) : ['no versions found']), [
        '',
        'Categories:',
        "  " + categories.join(', '),
        '',
        'Tags:',
        "  " + tags.join(', '),
        '',
        'More info:'
    ], viewutils_1.tableView([
        ['Unique identifier:', publisherName + "." + extensionName],
        ['Version:', version],
        ['Last updated:', viewutils_1.formatDateTime(lastUpdated)],
        ['Publisher:', publisherDisplayName],
        ['Published at:', viewutils_1.formatDate(publishedDate)],
    ])
        .map(viewutils_1.indentRow), [
        '',
        'Statistics:'
    ], viewutils_1.tableView(statistics.map(function (_a) {
        var statisticName = _a.statisticName, value = _a.value;
        return [statisticName, Number(value).toFixed(2)];
    }))
        .map(viewutils_1.indentRow)).map(function (line) { return viewutils_1.wordWrap(line); })
        .join('\n'));
}

//# sourceMappingURL=show.js.map
